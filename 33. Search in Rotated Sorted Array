class Solution{
public:
    int search(vector<int>& nums, int target){
        // Approach 3: BINARY SEARCH
        // TC : O(logN)
        // SC : O(1)
        // CODE:
        int low = 0;
        int high = nums.size()-1;

        while(low <= high){
            int mid = low + (high-low)/2;

            if(nums[mid] == target){
                return mid;
            }

            // Check in 1st HALF
            else if(nums[low] <= nums[mid]){
                // means 1st half is sorted
                // target is in 1st half
                // check if target is in the range of [low,mid-1], if(nums[low]<=target && nums[mid]>target), search it
                if(nums[low] <= target && nums[mid] > target){
                    high = mid - 1;
                }
                else{
                    low = mid + 1;
                } 
            }

            // check in 2nd HALF
            // 2nd half is in order
            // target is in 2nd half
            else{
                // if(nums[mid] <= nums[high]), means 2nd half is sorted
                if(nums[mid] < target && nums[high] >= target){
                    low = mid + 1;
                }
                else{
                    high = mid - 1;
                }
            }
        }
        return  -1;
    }
};



        /*
        // Approach 2: BINARY SEARCH (AV)
        // TC : O(logN)
        // SC : O(1)
        // CODE:
        int n = nums.size();
        // call the findIndex() function which will find the Index of the mininum element of the given Array
        int minElementIndex = findIndex(nums);

        // once, we get the index of the min element, all the elements from that index till the end will be sorted 
        // and all the elements from the start till the (index of min element - 1) will also be sorted
        // so, now we can apply binary search on 2 sorted arrays
        
        // call the binary search function for the 1st part (1st sorted array)
        int a1 = binarySearch(nums, target, 0, minElementIndex-1);
        // call the binary search function for the 2nd part (2nd sorted array)
        int a2 = binarySearch(nums, target, minElementIndex, n-1);

        // Now, target will be found either in 1st sorted array or in 2nd sorted array or it wont be present in both
        if(a1 == -1){
            return a2;
        }
        else{
            return a1;
        }
    }

    // create a function to find the Index of the minimum element of the Array since the array is rotated
    int findIndex(vector<int>& nums){
        int n = nums.size();
        int low = 0;
        int high = n-1;

        // return the 1st element directly if the array is not at all rotated
        if(nums[low] < nums[high]){
            return 0;
        }
        // else apply binary search
        while(low <= high){
            int mid = low + (high-low)/2;
            int next = (mid+1) % n; // to avoid boundary overflow, we write like this instead of (mid+1)
            int prev = (mid+n-1) % n; // to avoid boundary overflow, we write like this instead of (mid-1)

            // start comparing
            if(nums[mid] <= nums[next] && nums[mid] <= nums[prev]){
                // if we found the min element
                return mid;
            }
            if(nums[mid] <= nums[high]){
                // i.e if right side is sorted
                // search on the left side since the right side is sorted
                high = mid - 1;
            }
            else if(nums[low] <= nums[mid]){
                // search on the right side since left part is sorted
                low = mid + 1;
            }
        }
        return -1;
    }

    // binary search function to search for the target
    int binarySearch(vector<int>& nums, int target, int start, int end){
        int low = start;
        int high = end;

        while(low <= high){
            int mid = low + (high-low)/2;

            if(nums[mid] == target){
                return mid;
            }
            else if(nums[mid] < target){
                low = mid + 1;
            }
            else{
                high = mid - 1;
            }
        }
        return -1;
    }
};
*/



        /*
        // Approach: Binary Search
        // CODE:
        int low = 0, high = nums.size()-1;
        while(low <= high){
            int mid = (low + high)/2;
            if(nums[mid] == target)
                return mid;
            
            // There Exists Rotation and the Middle ELement is Present in the Left Part of the Array.
            else if(nums[mid] > nums[high]){
                if(target < nums[mid] && target >= nums[low]) //i.e if target is present in the first half of Array.
                    high = mid - 1;
                else
                    low = mid + 1;
            }
            
            // There Exists Rotation and the Middle Element is Present in the Right Part of the Array.
            else if(nums[mid] < nums[low]){
                if(target > nums[mid] && target <= nums[high]) //i.e if target is present in the second half of Array.
                    low = mid + 1;
                else
                    high = mid - 1;
            }
            
            // There is no Rotation, just like Normal Binary Search.
            else{
                if(target < nums[mid])
                    high = mid - 1;
                else
                    low = mid + 1;
            }
            
        }
        return -1;
    }
};
*/

