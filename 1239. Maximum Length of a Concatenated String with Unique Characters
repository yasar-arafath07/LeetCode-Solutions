class Solution{
public:
    // Create a boolean secondary function which will check if the current string has repeating characters OR if it
    // contains characters which are used in the past 
    bool compare(string &currentString, vector<int> &flag){
        vector<int> selfCheck(26, 0); // This vector is to check for currentString itself. Initially all are marked 0

        // traverse the current string
        // This is to check if the current string itself has repeating characters
        for(int i=0; i<currentString.size(); i++){
            // Check if the current character is already used/marked in the past, if YES, return false
            if(selfCheck[currentString[i] - 'a'] == 1) return false;
            // else, mark the character as 1 
            selfCheck[currentString[i] - 'a'] = 1;
        }

        // Now, we need to make the comparison of currentString with the past i.e, if we have used any characters of
        // currentString in the past or not which is using 'flag' vector
        for(int i=0; i<currentString.size(); i++){
            // Similarly, here also check if current character is already used in the past, If YES, return false
            if(flag[currentString[i] - 'a'] == 1) return false;
            // else, mark it as 1 in the helper() function below
        }
        return true; // i.e, if currentString has no repeating characters and also if it has characters which are not
        // used in the past, then we return true.
    }

    // Create a recursive helper() function which will return the answer i.e, the maximum length of a concatenated string
    int helper(vector<string> &arr, int i, int len, vector<int> &flag){
        // BASE CASE: If we reach the end of the Array, then we return the length. i.e, 
        if(i == arr.size()){
            return len;
        }

        // else, Initially check in the 'currentString' whether there are any repeating characters or in the current
        // string if there are any characters which are used in the past, then we skip the current string
        // So, first of all, make sure that there are no repeating characters in the current string
        // So, to check this, we call the 'compare()' function whcih will do the task for us 
        string currentString = arr[i]; // current string
        if(compare(currentString, flag) == false){
            // means either the currentString has repeating characters OR it has characters which are used in the past
            // In that case, we have only 1 Choice i.e, just go to next element i.e, 'i+1' by calling the recursvive fn
            return helper(arr, i+1, len, flag);
        }
        else{
            // else, if there is no repeating characters at all b/w currentString and past as well as there are only 
            // unique characters in the current string, then we have 2 choices: either include it OR dont include
            // Choice #1: Include the currentString for the concatinating string and then ask Recursion to do the 
            // rest of the task
            // So, traverse the curretString since we are including it and mark the characters in 'flag' as present so
            // that in the future we will get to know what all characters we have picked 
            for(int j=0; j<currentString.size(); j++){
                flag[currentString[j] - 'a'] = 1; 
            }
            // Also, since we are including the currentString, update the length
            len += currentString.size();
            // Now, ask Recursion to do the rest of the task from the next element
            int choice1 = helper(arr, i+1, len, flag); 

            // Choice #2: Don't include the current string in the concatinating string and go to the next element
            // So, before that undo whatever changes we made above.
            // BACKTRACKING STEPS:
            // undo the markings of the cuurentString in the 'flag'
            for(int j=0; j<currentString.size(); j++){
                flag[currentString[j] - 'a'] = 0; 
            } 
            // also, undo the length we added
            len -= currentString.size();
            // Now, we can call the Recursive function and ask it to do the rest of the task from 'i+1'
            int choice2 = helper(arr, i+1, len, flag);

            // So,Recursion will do its task 1st time where we Included the currentString and we will save the answer in 
            // 'choice1' and in the 2nd time also when we dont include the element Recursion will save the answer in
            // 'choice2' and in the end we compare both of them and return the maximum length
            return max(choice1, choice2);
        }
    }

    int maxLength(vector<string>& arr){
        // Approach: RECURSION + BACKTRACKING
        // TC : O(K * 2^N), the total no. of Nodes in the Recursive Tree where 'N' is the size of the i/p Array i.e, 
        // the total no. of strings in the i/p Array and 'K' is the average size of each string.
        // SC : O(N), the height of the i/p Array 'arr' where 'N' is the size of the i/p Array
        // C++ CODE:
        int n = arr.size();

        int i = 0; // Initially we start with the 1st string i.e, at index 0
        int len = 0; // this will be the length of the current string
        vector<int> flag(26, 0); // this is to keep track of what all characters we have used till now

        // call the helper() function which will return us the Maximum length of a concatenated string with unique 
        // characters
        return helper(arr, i, len, flag);
    }
};
