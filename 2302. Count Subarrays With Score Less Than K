class Solution{
public:
    long long countSubarrays(vector<int>& nums, long long k){
        // Approach: SLIDING WINDOW
        // TC : O(N)
        // SC : O(1)
        // CODE:
        long long n = nums.size();
        long long sum = 0;
        long long count = 0; // to store the no. of subarrays with score less than k
        int i = 0; // window start
        int j = 0; // window end

        // loop through nums
        for(int j=0; j<n; j++){
            // calculate sum
            sum += nums[j];  // sum = sum + nums[j];

            // remove the calculation for nums[i] from sum if the sum*length>=k
            while(sum * (j-i+1) >= k){
                // remove the calculation for nums[i] from the sum
                sum -= nums[i];  // sum = sum - nums[i]
                i++; // slide the window
            }
            // calculate the ans i.e, the total count of the subarrays with score less than k
            // count = count + (j-i+1); because there are (j-i+1) total subarrays
            count += (j-i+1);  // (j-i+1) is the window size
        }
        return count;
    }
};
