class Solution{
public:
    vector<int> searchRange(vector<int>& nums, int target){
        // Approach: BINARY SEARCH (AV)
        // TC : O(logN)
        // SC : O(1), since we are storing only 2 elements in the resultant vector
        // CODE:
        // create a resultant vector to store the 1st and last index
        vector<int>ans{-1, -1};

        //So here we have to do 2 Binary Searches: One for 1st Index and Other one for Last Index
        
        //Binary Search for 1st Index/Occurence.
        int low = 0; 
        int high = nums.size()-1;
        while(low <= high){
            int mid = low + (high-low)/2;
            if(nums[mid] == target){
                // save the index in the resultant vector and then continue searching on the left side to make sure if 
                // any other position is found
                ans[0] = mid; //i.e Continue Searching on left side of nums to find 1st Index of the given target;
                high = mid - 1;
            }
            else if(nums[mid] < target){
                low = mid + 1;  //i.e Search in Right Side of nums. 
            }
            else
                high = mid - 1;  //i.e Search in Left Side of nums.
        }
        
        //Binary Search to find the Last Occurence.
        low = 0;
        high = nums.size()-1;
        while(low <= high){
            int mid = low + (high-low)/2;
            if(nums[mid] == target){
                // save the index in the resultant vector and continue searching on the right side 
                ans[1] = mid; //i.e Continue Searching in the Right Side as we want Right Index.
                low = mid + 1;
            }
            else if(nums[mid] < target){
                low = mid + 1;
            
            }else
                high = mid - 1;
        }
        // return the ans
        return ans; // If element is not at all found, return {-1,-1}
        
    }
};
