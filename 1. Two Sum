class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        /*
        // Approach 1:
        //CODE:
        // keys are the Array values and values are associated array indices.
        unordered_map<int, int> map; // use a hash table, instead of creating one.
        vector<int> res;
        for(int i=0; i<nums.size(); i++){
            if(map.count(target-nums[i])){ //if partner of this value to reach the target sum has been saved already
                res.push_back(map[target-nums[i]]); // get index of other value from the hash table
                res.push_back(i);
                return res;
            }
            else{ // if the pair has not yet been found, save value(index value of Array value) to hash table.
                map[nums[i]] = i;
            }
        }
        return res;
        */
        
        
        // Approach 2: Using Hash Table (Explanation to code is written below)
        CODE:
        vector<int> ans;
        unordered_map<int, int> map; //declaring the hash table
        for(int i=0; i<nums.size(); i++){
            if(map.find(target-nums[i]) != map.end()){ //i.e if the partner of this nums[i] value is present in table
                ans.push_back(map[target-nums[i]]);
                ans.push_back(i);
                return ans;
            }
            else{  // i.e if partner value is not found, save the value to hash table.
                map[nums[i]] = i;
            }
        }
        return ans;
    }
};

/*
// BRUTE FORCE Approach: ( eg: nums = [2,6,5,8,11], target=14 )
- We keep 'i' on the starting element of Array i.e on index 0, and we check in the right side of the Array if (target - nums[i]) exists in the Array or not. 
  (i.e if 14-2 = 12 exists or not).
- 12 does not exist in the Array. So we increment i and we move i to index 1. and we check in the right if target-nums[i] i.e 14-6 = 8 is present or not. 
  we find 8 at index 3.
- So the 1st index and the 3rd index is our required pair.
- If we did'nt find the pair then we would've moved our i pointer to the next index and check for the same above condition which is target-nums[i] exists in the 
  right side of i. 
//TIME COMPLEXITY: O(N^2) because for every i we are checking on the right half of the Array.
//SPACE COMPLEXITY: O(1)
*/


/*
//OPTIMIZED APPROACH: Use HASH TABLE
eg: nums = [2,6,5,8,11] and target=14
- Initially we take a empty Hash Table.
- Now, we iterate over the wholoe Array. So we start with index 0 and check if (target-nums[i]) is present in the hash table. i.e we check if 14-nums[0] = 14-2 = 12 
  is present in hash table or not.
- We can see that 12 is not present in the hash table. So what we do is we put this 2 along with it's index number inside the hash table as (2,0).
  hash_table = [(2,0)]
- Now the pointer comes to index 1. Now we check if target-nums[i] = 14-6 = 8 is present in hash table or not? 8 is not present in the hash table so we put nums[i] 
  i.e 6 along with it's index number inside the hash tavble as (6,1).
  hash_table = [(2,0), (6,1)]
- Now move the pointer to the next index i.e index 2. now check if target-nums[i] i.e 14-5 = 9 is present in hash table or not? 9 is not present so insert nums[i] 
  along with its index number into the ahsh table.
  hash_table = [(2,0), (6,1), (5,2)]
- The next index is 3. So check target-nums[i] i.e 14-8 = 6. Now we can see that 6 is present inside the hash table.
  Now 6 exists at index 1. Currently our pointer i is pointing to 8 at index 3.
- So we get index 1 from the hash table and index 3 from i. So we return (1,3).
// TIME COMPLEXITY: Hash table will take O(1) for insertion and for searching in an average case. so we can say that we are doing a linear iteration. 
   So the time complexity will be O(N).
// SPACE COMPLEXITY: O(N) because we are storing all the values in the hash table.
*/
