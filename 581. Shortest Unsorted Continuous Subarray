class Solution{
public:
    int findUnsortedSubarray(vector<int>& nums){
        // Approach: TWO POINTERS (DG's)
        // TC : O(N)
        // SC : O(1)
        // CODE:
        int low = 0; // pointer 1
        int high = nums.size() - 1; // pointer 2
        
        // find the first element in the array which is out of sorting order from the beginning
        while(low < nums.size()-1 && nums[low] <= nums[low+1]){
            low++;
        }
        
        // If 'low' pointer reaches till the last index, i.e, if the array is sorted, we return 0
        if(low == nums.size()-1){
            return 0;
        }
        
        // find the first element in the array which is out of sorting order from the end
        while(high > 0 && nums[high] >= nums[high-1]){
            high--;
        }
        
        // Now,we got a subarray from 'low' and 'high', find the maximum and minimum of the subarray
        int subarrayMax = INT_MIN;
        int subarrayMin = INT_MAX;
        for(int i=low; i<=high; i++){
            subarrayMax = max(subarrayMax, nums[i]);
            subarrayMin = min(subarrayMin, nums[i]);
        }
        
        // Now, extend the subarray to include any number which is bigger than the minimum of the subarray
        while(low > 0 && nums[low-1] > subarrayMin){
            low--;
        }
        
        // Similarly, extend the subarray to include any number which is smaller than the maximum of the subarray
        while(high < nums.size()-1 && nums[high+1] < subarrayMax){
            high++;
        } 

        // return the length of the final subarray
        return high - low + 1;
    }
};
