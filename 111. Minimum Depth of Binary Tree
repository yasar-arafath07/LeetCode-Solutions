/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution{
public:
    int minDepth(TreeNode* root){
        // Approach: RECURSION
        // TC : 
        // SC : 
        // C++ CODE:
        int ans = 0; // to store the minimum depth

        // BASE CASE:
        if(root == NULL){
            return 0;
        }

        int heightLeft = minDepth(root->left); // find the height of the left subtree
        int heightRight = minDepth(root->right); // find the height of the right subtree
        
        // Calculate the Answer
        ans = (heightLeft == 0 || heightRight == 0) ? heightLeft+heightRight+1 : min(heightLeft, heightRight)+1;
        
        // Return the Answer
        return ans;
    }
};
