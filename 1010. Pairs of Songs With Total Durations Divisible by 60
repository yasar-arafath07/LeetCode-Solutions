class Solution{
public:
    int numPairsDivisibleBy60(vector<int>& time){
        // Approach: HASHMAP ARRAY 
        // EXPLANATION: THis is a variation of 2 SUM. This is basically 2 SUM with their sum divisible by 60.
        // TC : O(N)
        // SC : O(60) = O(1)
        // C++ CODE:
        int ans = 0; // to store the no.of pairs of songs
        vector<int> mpp(60,0); // Array of size 60 with all elements initially assigned with 0 to store the frequency of
        // remainder. 
        // Why Array of size 60? because, we need to find the pair of songs with total durations divisible by 60. So, the
        // remainder of any no. divided i.e, mod by 60 will be in the range of 1 to 59. So, we take Array of size 60.

        // Traverse the I/p Array 'time'
        for(int i=0; i<time.size(); i++){
            int rem = time[i] % 60; // calculate the remainder

            // Check if the Remainder is 0 or not.
            // If it is 0, then add the frequency of remainder 0 to the 'ans'
            if(rem == 0){
                ans += mpp[0];
            }
            // else, we check if the frequency (60-rem) is present. If YES, we add it to 'ans'.
            else{
                ans += mpp[60-rem];
            }
            // and then, we update the frequency of the remainder we got
            mpp[rem]++;
        }
        return ans;
    }
};
