class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        // Approach : using for loop (DGs)
        // TC : O(N)
        // SC : O(1)
        int maxi = 0; // stores the length of longest subarray
        int maxOnesCount = 0; // to store the total no. of 1's present in the window
        int i = 0; // windowStart
        int j = 0; // windowEnd

        for(int j=0; j<nums.size(); j++){
            if(nums[j] == 1){
                maxOnesCount++; // keeping track of total no. of 1's in the window
            }
            // Current window size is from 'i' to 'j', overall we have a maximum of 1's repeating a maximum of 
            // 'maxOnesCount' times, this means that we can have a window with 'maxOnesCount' 1's and the remaining
            // are 0's which we should replace with 1's. Now, if the remaining 0's are more than 'k', it is time to
            // shrink the window as we are not allowed to replace more than 'k' 0's
            if((j-i+1)-maxOnesCount > k){
                if(nums[i] == 1){
                    maxOnesCount--; 
                }
                i++; // shrink the window
            }
            maxi = max(maxi, j-i+1);
        }
        return maxi;
    }
};
