class Solution{
public:
    long long countBadPairs(vector<int>& nums){
        // Approach: Using HASHMAP
        // TC : O(N)
        // SC : O(N)
        // CODE:
        long long n = nums.size();
        unordered_map<int,int> map; 
        long long total_pairs = n*(n-1)/2; // total no. of pairs
        long long good_pairs = 0; // count will store the total no. of good pairs

        for(int i=0; i<n; i++){
            int curr = i - nums[i];  // this forms a single element of a pair
            good_pairs += map[curr]; 
            map[curr]++;
        }
        long long bad_pairs = total_pairs - good_pairs;
        return bad_pairs;
    }
};

/*
// EXPLANATION:
- The count of total no. of pairs is n*(n-1)/2 where 'n' is the total no. of elements
- First, find the total count of good pairs
- Good pairs are those pairs (i,j) where i<j and j-i == nums[j]-nums[i]
- So, the equation can also be written as: j-nums[j] == i-nums[i]
- Then, subtract the count of good pairs from total no. of pairs to get the count of bad pairs
- Therefore, Bad pairs = Total pairs - Good pairs
*/
