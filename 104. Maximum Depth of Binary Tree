/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root == NULL)
            return 0;
        else{
            int maxDepth_Left = maxDepth(root->left);
            int maxDepth_Right = maxDepth(root->right);
            return (max(maxDepth_Left, maxDepth_Right)) + 1; //
        }
        
    }
};

//So to find the maximum depth of the given binary tree, we will have to take out the maximum of the 2 depths(left and right) given to us by recursion, and add 1 to that to consider the current level i.e. root's level into our depth.

/*

COMPLEXITY:
Time Complexity: O(no of nodes)  //because we are traversing all the nodes of the tree.
Space Complexity: O(max depth of tree)

*/
