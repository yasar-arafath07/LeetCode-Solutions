class Solution{
public:
    vector<int> singleNumber(vector<int>& nums){
        // Approach 2: SORTING
        // TC : O(NlogN) [Use BIT MANIPULATION for linear time complexity]
        // SC : O(1)
        // C++ CODE:
        int n = nums.size();
        vector<int> res; // to store the result

        // sort the array
        sort(nums.begin(), nums.end());

        // traverse through nums
        for(int i=0; i<nums.size()-1; ){
            if(nums[i] == nums[i+1]){
                i += 2;
            }
            else{
                res.push_back(nums[i]);
                i++;
                if(res.size() == 2){
                    return res;
                }
            }
        }

        // EDGE CASE:
        if(res.size() == 1){
            res.push_back(nums.back()); // push the last element of nums into res
        }
        // return the result vector
        return res;




        /*
        // Approach 1: Using HASHMAP
        // TC : O(N)
        // SC : O(N)
        // C++ CODE:
        unordered_map<int,int> mpp;
        vector<int> res;

        // store the frequency of each element of nums in the map
        for(int i=0; i<nums.size(); i++){
            mpp[nums[i]]++;
        }

        // traverse the map
        for(auto& it : mpp){
            // if the frequency of any element is 1, push the element into the result vector
            if(it.second == 1){
                res.push_back(it.first);
            }
        }
        return res;
        */
    }
};
