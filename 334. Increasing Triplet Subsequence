class Solution{
public:
    bool increasingTriplet(vector<int>& nums){
        // Approach: GREEDY
        // TC : O(N)
        // SC : O(1)
        // C++ CODE:
        int32_t val1 = INT_MAX; // to store nums[i]
        int32_t val2 = INT_MAX; // to store nums[j]

        // Traverse the I/p Array 'nums'
        for(int i=0; i<nums.size(); i++){
            // If current element is the smallest, i.e, if the current element is smaller than 'val1', then update 'val1'
            if(nums[i] <= val1){
                val1 = nums[i];
            }
            // else if current element is greater than 'val1' and is lesser than or equal to 'val2', then update 'val2'
            // i.e, we update 'val2' only if current element is greater than 'val1' and smaller than 'val2'
            else if(nums[i] <= val2){
                // OR "else if(nums[i] > val1 && nums[i] <= val2)"
                val2 = nums[i];
            }
            // else, if the current element is larger than both 'val1' and 'val2', then we found a triplet that satisfy the 
            // given condition. So, we return true.
            else{
                // if(nums[i] > val1 && nums[i] > val2){
                    return true;
                // }
            }
        }
        return false;
    }
};
