class Solution{
public:
    int findFinalValue(vector<int>& nums, int original){
        /*
        // Approach 1: Using find() function
        // TC : O(NlogN)
        // SC : O(1)
        // C++ CODE:
        while(find(nums.begin(), nums.end(), original) != nums.end()){
            // keep multiplying found value by 2
            original *= 2; // original = original * 2;
        }
        return original;
        */



        /*
        // Approach2: Using find() function using for loop
        // TC : O(NlogN)
        // SC : O(1)
        // C++ CODE:
        int n = 1;
        
        for(int i=0; i<n; i++){
            if(find(nums.begin(), nums.end(), original) != nums.end()){
                original *= 2;
                n += 1; // n++ i.e, 'n' is incremented by 1 because the question wants us to perform the operation again
            }           // if we find the element 'original' again after doubling it.
        }
        return original;
        */


        // Approach 3: Using HASHMAP
        // TC : O(N)
        // SC : O(1001) i.e, O(constant) = O(1)
        // C++ CODE:
        int h[1001] = {}; // empty array 'h' of size 1001

        // store the presence of elements of nums in 'h'
        for(auto i : nums){
            h[i]++;
        }

        // run a loop
        while(original <= 1000 && h[original]){
            original *= 2; 
        }
        return original;
    }
};



/*
Q) What find() function do?
Ans: find() function searches an element ‘x’ in the Vector/Array, and if the element ‘x’ is present in the vector, it
returns an iterator or we say a pointer to that location and if the element is not found, it returns an iterator to the 
last element i.e, arr.end().
- Syntax: find(arr.begin(), arr.end(), x), where ‘x’ is the element that is needed to search
- So, find(arr.begin(), arr.end(), x) ! = arr.end(), means ‘x’ is present in the Array ‘arr’.
*/
