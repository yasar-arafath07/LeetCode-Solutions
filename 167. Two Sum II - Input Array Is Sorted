class Solution{
public:
    vector<int> twoSum(vector<int>& numbers, int target){
        // Approach : TWO POINTERS (AS)
        // TC : O(N)
        // SC : O(1)
        // CODE:
        int left = 0; // pointer 1
        int right = numbers.size()-1; // pointer 2
 
        while(left < right){
            // Case 1: If sum of 2 indices is equal to the target
            if(numbers[left] + numbers[right] == target){
                return {left+1, right+1}; // add 1 to the index
            }
            // Case 2: If the sum of 2 indices is less than the target
            else if(numbers[left] + numbers[right] < target){
                left++; // we need a larger sum
            }
            // Case 3: If the sum of 2 indices is greater than the target
            else{
                right--;  // we need a smaller sum
            }
        }
        return {};  // If there is no such 2 indices, return empty vector
    }
};

/*
// BRUTE FORCE: ((Worst))
- Use 2 for loops
- Fix 1 element in 1st loop and search for it's partner in the 2nd loop
// TC : O(N^2)
// SC : O(1)


// BETTER Approach : BINARY SEARCH
- Fix 1 element and search for the other
// TC : O(N*logN)
// SC : O(1)
*/
