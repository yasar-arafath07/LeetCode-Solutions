class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s){
        // Approach 1: Using unordered_map
        unordered_map<string, int> map;
        vector<string> res; // to store the 10 letter long repeated DNA sequqnce

        if(s.size() < 10){
            return res;
        }
        
        // i traverse from index 0 till the s.size()-9 th element since we need exactly 10 elements
        for(int i=0; i<s.size()-9; i++){
            map[s.substr(i,10)]++; // Inserting 10 elements of string s (i.e a DNA sequence) into the map at a time 
            // and then incrementing the frequency of those substring i.e, DNA sequence
        }

        // now traverse on the map and check if any key element (substring OR DNA sequence) repeated more than once.
        // If YES, then push the substring (DNA sequence) into the result vector
        for(auto it : map){
            if(it.second > 1){
                res.push_back(it.first);
            }
        }
        return res;
    }
};
