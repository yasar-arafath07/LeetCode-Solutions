class Solution{
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n){
        // Approach: GREEDY
        // TC : O(N)
        // SC : O(1)
        // C++ CODE:
        int len = flowerbed.size();
        int count = 0; // tells the count of the flowers we can plant 
        bool left = false; // to check if the previous plot is 0
        bool right = false; // to check if the next plot is 0

        // Traverse the I/p Array
        for(int i=0; i<flowerbed.size(); i++){
            // If the current plot is 0, then only we can proceed 
            if(flowerbed[i] == 0){
                left = false; // reset 'left' to false
                right = false; // reset 'right' to false
                
                // Now, check if the previous plot is also 0 or not. If YES, make 'left' as true
                if(i == 0 || flowerbed[i-1] == 0){
                    left = true;
                }
                // Similarly, check if the next plot is also 0. If YES, then make 'right' as true.
                if(i == len-1 || flowerbed[i+1] == 0){
                    right = true;
                }
                // Now, if both the left and right plot are 0 (empty) i.e, if both 'left' and 'right' are marked as true,
                // then we can plant a flower on the current plot 'i'
                if(left and right){
                    flowerbed[i] = 1; // plant the flower on the current plot 'i'
                    count++; // since we can plant a flower, we increment the 'count'
                }
            }
        }
        // cout<<count<<endl;
        return count >= n; // if(count >= n), which means we can plant 'n' flowers in the flowerbed. So, we return true.
        // else we return false.
    }
};
