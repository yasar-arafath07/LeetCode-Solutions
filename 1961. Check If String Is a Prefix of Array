class Solution {
public:
    bool isPrefixString(string s, vector<string>& words) {
        /*
        //APPROACH 1: 
        //Time Complexity: O(N)
        //CODE:
        int n = words.size();
        string res = "";   //maintaining an empty string
        
        for(int i=0; i<n; i++){
            res += words[i];  // res = res + words[i]; OR better write as res = words[i] + res; to avoid TLE
            if(res == s){
                return true;
            }
        }
        return false;
        */
        
        
        //APPROACH 2:
        /* Just keep Appending the string and checking at the same time if it matches 's'. We can also break earlier when the length exceeds the length of 's' */
        /*
        //CODE:
        string check = "";
        
        for(const string &i : words){//using const, ampersand(&) etc are good practis of writing code.jz forefficiency
            check += i;  //check = check + i;
            if(check == s)
                return true;
            if(check.length() >= s.length())
                return false;
        }
        return false;
        */
        
        
        //APPROACH 3: Using append() function.
        //CODE:
        int n = s.size();
        string ans;
        
        for(const auto& i : words){
            ans += i;
            if(ans == s)
                return true;
            if(ans.size() >= s.size())
                return false;
        }
        return false;
    }
};
