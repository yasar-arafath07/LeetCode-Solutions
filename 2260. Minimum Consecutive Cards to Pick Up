class Solution{
public:
    int minimumCardPickup(vector<int>& cards){
        // Approach: HASHMAP
        // TC : O(N)
        // SC : O(N)
        // C++ CODE:
        int n = cards.size();
        int ans = INT_MAX; // since we need to find the minimum length, we initialize with INT_MAX
        unordered_map<int,int> mpp; // to store the index of the previous occurence of the element of the i/p Array

        // Traverse the i/p Array
        for(int i=0; i<cards.size(); i++){
            // Check if the current element's occurence is already present in the HashMap
            if(mpp.find(cards[i]) != mpp.end()){
                // If the element's occurence is already present in the map, then find the distance between current 
                // occurence and the previous occurence and update the 'ans'
                ans = min(ans, i - mpp[cards[i]] + 1);
            }
            // else, if we can't find the current elements occurence in the HashMap, then record the index of current
            // element in the HashMap
            mpp[cards[i]] = i;
        }
        return ans == INT_MAX ? -1 : ans; // If all elements are unique, i.e, if there is no equal pairs, return -1.
        // else, return the calculated length between pairs
    }
};



/*
// EXPLANATION: We will store the previous occurence of an element in a map and then we continue to traverse the Array.
If the element is already present, we take its index from the map and find the current length. We update the 'ans' if
current length is less than 'ans' since we need the minimum cards to pick.

// ALGORITHM EXPLANATION:
- Create a HashMap to store the element as key and it's Index as value.
- Iterate the Array and in each iteration, check if the current element is present in the HashMap, If YES, calculate
  the distance between those 2 elements using the current index we have and the index we recorded in the HashMap of 
  the previous occurence.
  and else if the element is not found, then store it's index in the HASHMAP
- Like this, check for every other elements of the Array and return the minimum distance/length we can get for any pair.
- If there are no pairs i.e, if all elements of the Array are unique, then we return -1.
*/
