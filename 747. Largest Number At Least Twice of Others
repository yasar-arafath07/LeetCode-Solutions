class Solution{
public:
    int dominantIndex(vector<int>& nums){
        // Approach:
        // TC : O(N)
        // SC : O(1)
        // C++ CODE:
        int maxi = INT_MIN; // this will store the largest/maximum element of the Array
        int second = INT_MIN; // this will store the 2nd largest element of the Array
        int index = -1; // this will store the index of the largest element i,e 'maxi'

        // loop through 'nums'
        for(int i=0; i<nums.size(); i++){
            // If the current element is greater than the current largest of the Array, perform the following operations
            if(nums[i] > maxi){
                second = maxi;
                maxi = nums[i];
                index = i;
            }
            // else if the current element is lesser than the current largest (maxi) but it is greater than 2nd largest,
            //  then update the 2nd largest
            else if(nums[i] > second && nums[i] < maxi){
                second = nums[i];
            }
        }
        return second*2 <= maxi ? index : -1; // to avoid overflow in multiplication of 'second*2' in some cases, 
                                              // we can write it as: "return second <= maxi/2 ? index : -1;"




        /*
        // Approach 1: Random BRUTE FORCE
        // Passes 176/231 TestCases.
        // TC : 
        // SC : 
        // C++ CODE:
        int n = nums.size();

        // find the largest element of the Array
        int largest = *max_element(nums.begin(), nums.end());

        int i = 0;

        // traverse the Array
        for(i=0; i<nums.size()-1; i++){
            if(nums[i] != largest && largest >= 2*nums[i]){
                continue;
            }
            else{
                return -1;
            }
        }
        return i;
        */
    }
};



/*
// EXPLANATION:
- Find the 2 largest numbers in the Array.
- Now, check if the double of 2nd largest number is <= largest number.
- If true, return the index of largest number. else return -1.
*/
