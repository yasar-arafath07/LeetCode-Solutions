class Solution{
public:
    int minSteps(string s, string t){
        // Approach: MAPPING
        // EXPLANATION: Find the total no. of different characters in both the strings 's' and 't'
        // TC : O(M+N), where 'M' is the length of string 's' and 'N' is the length of string 't'
        // SC : O(26) = O(1)
        // C++ CODE:
        int ans = 0; // to store the count of minimum no. of steps i.e, total np. of different characters here
        vector<int> freq(26,0); // to store the frequency of the characters from string 's' and 't'
        // OR just use unordered_map of 'char' and 'int' and do the same steps as we did below and in the end traverse 
        // the map and add the absolute value present at 'second' of map to the 'ans'
        
        // Traverse the string 's' and store the frequency of the elements in the 'freq' Array.
        for(int i=0; i<s.length(); i++){
            freq[s[i] - 'a']++;
        }
        
        // Traverse the string 't' and decrement the frequency of the elements in the 'freq' Array
        for(int i=0; i<t.length(); i++){
            freq[t[i] - 'a']--;
        }
        
        // Traverse the frequency Array 'freq' and find the total no. of different/remaining characters and store it 
        // in 'ans'
        for(auto& x : freq){
            ans += abs(x); // since we are decrementing the freqency of elements in 2nd loop, the frequency may go 
        }                  // below 0. So, we take the absolute value of it.

        return ans;
    }
};
