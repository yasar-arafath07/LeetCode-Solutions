class Solution{
public:
    vector<int> rearrangeArray(vector<int>& nums){
        // Approach: TWO POINTERS
        // Explanation: We know that the 1st element should be a +ve integer (given in Q). So, all the +ve numbers will
        // be on multiple of 2 indexes (0,2,4,6,...) and -ve numbers will be on odd indexes (1,3,5...)
        // TC : O(N)
        // SC : O(N)
        // CODE:
        int n = nums.size();
        vector<int> res(n,0);  // maintain a vector of size n and fill with 0 in all positions
        int posIndex = 0; // pointer1 initially will point to first positive index which is 0
        int negIndex = 1; // pointer2 will initially point to 1st negative index which is 1
        
        // Iterate through all the elements of the nums
        for(auto it : nums){
            // iIf the element is a positive integer, insert it at the positive index of the resultant vector
            if(it > 0){
                res[posIndex] = it;
                posIndex += 2; // Increment posIndex by 2 positions forward
            }
            // Similarly, if the Integer is negative, insert it at the odd index of the resultant vector
            if(it < 0){
                res[negIndex] = it;
                negIndex += 2; // NegativeIndex pointer will now point to the next negative index
            }
        }
        // return the resultant vector
        return res;
    }
};
