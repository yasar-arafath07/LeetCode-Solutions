class Solution{
public:
    long long minimumTime(vector<int>& time, int totalTrips){
        // Approach: BINARY SEARCH (BINARY SEARCH on ANSWER)
        // TC : O(N*logN), where 'N' is 1e14 (10^14)
        // SC : O(1)
        // C++ CODE:
        long long low = 1; // low pointer
        long long high = 1e14; // high pointer (10^14)

        // Apply Binary Search
        while(low <= high){
            // Find the 'mid' time
            long long mid = low + (high - low) / 2;

            // calculate the total no. of trips completed at time 'mid'
            // So, traverse the 'time' Array
            long long trips = 0;
            for(int i=0; i<time.size(); i++){
                trips += mid/time[i];
            }

            // Check the conditions
            // If 'no. of trips' is lesser than required trips, then Increase time i.e, make low = mid + 1
            if(trips < totalTrips){
                low = mid + 1;
            }
            // If 'no. of trips' is greater than required trips, then Decrease the time i.e, make high = mid - 1
            else{
                high = mid - 1;
            }
        }
        return low;
    }
};


/*
// EXPLANATION of the ALGORITHM:
// IDENTIFICATION: In these type of Problems where we are asked to find some minimum/maximum/atleast, we use the concept
   of BINARY SEARCH i.e, more formally this is a technique which is generally called as 'BINARY SEARCH on ANSWER' OR 
   'ANSWER on BINARY SEARCH'
- Here, we need to find the Minimum Time.
- Let's take the lowest time as 1 and the highest time ca be as large as 10614 (1e14).
- Now, Apply Binary Search and find the mid.
- For the given 'mid', find what is the Answer (which is the count of totalTrips at time = mid)
- Now, If we get 'no. of Trips < requiredTrips', then we need to Increase time. So, we update 'low = mid + 1' since we 
  need more no. of Trips.
- else if we get 'no. of Trips > requiredTrips', then we need to decrease time. So, we update 'high = mid - 1' since we 
  need lesser no. of Trips.
- And in the end, return 'low' which is the lowest time.
*/


