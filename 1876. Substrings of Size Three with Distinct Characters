class Solution {
public:
    int countGoodSubstrings(string s){
        // Approach : AV's using while loop
        unordered_map<char, int> map; // to store the frequencies of the character's of the string
        int count = 0;
        int i = 0; // windowStart
        int j = 0; // windowEnd

        while(j < s.size()){
            // CALCULATION:
            map[s[j]]++;  // insert the element into the map and increment it's frequency

            // CASE 1: If the window size '3' is not hit, move the tail of the window by 1
            if(j-i+1 < 3){
                j++;
            }
            
            // CASE 2 : If the conditions are met, i.e, if we found 3 distinct characters in the window
            else if(map.size() == 3){
                // Pick an Answer
                count++;
                map.erase(s[i]);
                i++;
                j++;
            }

            // CASE 3: If the size of the map is not 3, then there are repeating characters in the window
            // So, in this case we shrink the window by decrementing the frequency of s[i] and then doing i++
            else{
                map[s[i]]--; // decrement the frequency of s[i] in the map
                // After decrementing the frequency, if the frequency becomes 0, then remove it from the map
                if(map[s[i]] == 0){
                    map.erase(s[i]);
                }
                i++; // shrink the window
                j++;
            }
        }
        return count;
    }
};
