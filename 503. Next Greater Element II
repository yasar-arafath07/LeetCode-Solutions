class Solution{
public:
    vector<int> nextGreaterElements(vector<int>& nums){
        // Approach: 
        // TC : O(N)
        // SC : O(N), in worst case
        // C++ CODE:
        int n = nums.size();
        vector<int> res(n, -1); // create a res vector of same size of i/p array and initialize all element with -1
        stack<int> st; // create a stack to store the indexes

        // loop through the array (since we need to loop twice, the condition will be " < n*2 ")
        for(int i=0; i<n*2; i++){
            while(st.size() != 0 && nums[st.top()] < nums[i%n]){
                res[st.top()] = nums[i%n];
                st.pop();
            }
            // if stack is empty, push the current index into it
            st.push(i%n); // why i%n? bec, if we reach the end of the array in 1st loop and when we increment i, i should
            // again come to starting of the array for 2nd loop
        }
        return res;
    }
};




/*
// EXPLANATION:
- Since it is a circular Array, we also need to find the Next Greater Element of last element of the Array also.
- So, we loop the Array Twice.
- Loop once, we can get the Next Greater Element of the Normal Array.
- Loop twice, we can get the Next Greater Element of a Circular Array.
*/
