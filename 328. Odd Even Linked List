/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution{
public:
    ListNode* oddEvenList(ListNode* head){
        // Approach: OPTIMIZED
        // Explanation: The Approach here is to Split the LL into 2. One Containing all ODD Nodes and the other with
        // all EVEN Nodes. and in the end, attach the start of EVEN node LL at the end of ODD node LL
        // - To Split the LL into EVEN & ODD Nodes, we traverse the LL and keep connecting the consecutve Odd nodes &
        // Even nodes (to maintain the order of nodes) and save a pointer at the 1st even node so that in the end, 
        // we can cooncect it to end of odd LL. 
        // TC : O(N)
        // SC : O(1)
        // CODE:

        // EDGE CASE:
        if(head == NULL || head->next == NULL) return head;

        ListNode* odd = head;  // Initially odd points to 1st odd position
        ListNode* even = head->next; // Initially, even points to 1st even position
        ListNode* evenHead = head->next; // save a pointer at start of even node, so that we can easily connect it to 
        // end of odd LL in the end 

        // traverse the LL using odd and even pointers
        while(odd->next != NULL && even->next != NULL){
            odd->next = odd->next->next; // connect all odd nodes together which constitutes a single odd LL
            even->next = even->next->next; // connect all the even nodes together which constitutes a single even LL
            odd = odd->next; // move odd forward
            even = even->next;  // move even forward
        }
        // After the above while loop, 2 LL will be created : ODD LL & EVEN LL
        // Now, connect them together
        odd->next = evenHead; // place the 1st even node after the last odd node

        // return the head
        return head;
    }
};
