class Solution{
public:
    // Create a boolean function 'isPalindrome()' which will return true if the string 's' is a Palindrome. else it 
    // will return false.
    bool isPalindrome(string s, int i, int j){
        // keep Traversing till 'i' and 'j' meet each other
        while(i < j){
            // Compare the chatracters at both ends, If they are not equal, then directly return false
            if(s[i] != s[j]){
                return false;
            }
            // else, If the characters are equal, then move the pointers to compare rest of the characters
            i++;
            j--;
        }
        // If all the characters are equal from both ends till the middle, return true.
        return true;
    }

    bool validPalindrome(string s){
        // Approach: TWO POINTERS
        // TC : O(N)
        // SC : O(1)
        // C++ CODE:
        int n = s.length();

        // Traverse the string 's'
        for(int i=0, j=n-1; i<j; i++, j--){
            // Compare the characters at 'i' and 'j'
            if(s[i] != s[j]){
                // then since we can delete 1 element, we can either delete the 'i'th element OR 'j'th element
                return isPalindrome(s, i+1, j) || isPalindrome(s, i, j-1);
            }
        }
        return true;
    }
};
