/********************************************************* C CODE ************************************************************/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* removeElements(struct ListNode* head, int val){
    
    /********** ITERATIVE APPROACH ***********/
    /*
    struct ListNode *current = head;
    struct ListNode *prev = NULL;
    
    while(current){
        if(current->val == val){
            if(current == head){
                head = current->next;
                prev = current;
                free(current);
                current = head;
            }else{
                prev->next = current->next;
                free(current);
                current = prev->next;
            }
        }else{
            prev = current;
            current = current->next;
        }
        
    }
    return head;   */
    
    
    /*********** RECURSIVE APPROACH ************/
    
    if(head == NULL){
        return NULL;
    }
    else if(head->val == val){
        return removeElements(head->next, val);
    }
    else
        head->next = removeElements(head->next, val);
    
    return head;   

}



/***************************************************************** C++ CODE *********************************************************************/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution{
public:
    ListNode* removeElements(ListNode* head, int val){
        // Approach 2: RECURSIVE SOLUTION (M Fraz)
        // this solution is not better than approach 1 which is iterative, but this has a clean code
        // TC : O(N)
        // SC : O(N), which is the space required in the recursion stack memory since we are calling recursive 
        // function also N times
        // CODE:

        // EDGE CASE:
        if(head == NULL) return NULL;

        //call the RECURSIVE FUNCTION
        head->next = removeElements(head->next, val);
        // self task:
        if(head->val == val){
            // perform deletion
            ListNode* ans = head->next;
            delete head;  // don't need to perform this. but it's a good practice
            return ans;  // or directly return head->next without creating ans pointer but we need to remove that 
            // delete(head) operation for this
        }
        else{
            // if values are not equal to given value
            return head;
        }


        /*
        // Approach 1: ITERATIVE APPROACH (M Fraz)
        // TC : O(N), since we are visiting each node
        // SC : O(1), no extra space required
        // CODE:

        // EDGE CASE:
        if(head == NULL) return NULL;
        
        // create a dummy node so that deletion becomes easier if we want to delete 1st node itself in any case
        ListNode* dummy = new ListNode(-1); 
        dummy->next = head; // connect dummy node to head
        ListNode* temp = dummy; // temp is used to move forward i.e, to traverse

        // traversal starts
        while(temp != NULL && temp->next != NULL){
            // if the node val is same as given val, perform removal of that node
            if(temp->next->val == val){
                // delete that node
                ListNode* del = temp->next;  // this is the node to be deleted
                temp->next = del->next;  // update the links
                delete(del); // delete the node from the memory
            }
            else{
                // if(temp->next->val != val), we just move temp
                temp = temp->next;
            }
        }
        return dummy->next;
        */
    }
};
