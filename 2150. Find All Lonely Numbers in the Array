class Solution{
public:
    vector<int> findLonely(vector<int>& nums){
        // Approach: using HASHMAP
        // TC : O(N), where N is the number of elements in the Array
        // SC : O(M), where M is the unique elements in the Array
        // CODE:
        vector<int> res; // resultant vector to store the lonely numbers
        unordered_map<int,int> mpp; // create a map to store the frequency of the array elements

        // storing the frequency of the array elements inside the hashmap
        for(int i=0; i<nums.size(); i++){
            mpp[nums[i]]++;
        }

        // Now, traverse on the frequency map (mpp)
        for(auto it : mpp){
            int x = it.first; // the element itself
            int y = it.second; // elements frequency
            // If the count of an element is 1 and there is no adjacent element of it present in the map, then that
            // number is a lonely number. So, we insert it to the resultant vector
            if(y == 1 && mpp.count(x+1) == 0 && mpp.count(x-1) == 0){
                res.push_back(x);
            }
        }
        return res;
    }
};
