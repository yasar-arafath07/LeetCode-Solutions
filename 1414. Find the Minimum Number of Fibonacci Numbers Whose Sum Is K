class Solution{
public:
    int findMinFibonacciNumbers(int k){
        // Approach: MATH + GREEDY
        // TC : 
        // SC : 
        // C++ CODE:
        int ans = 0; // to store the count of minimum Fibonacci numbers needed whose sum equals given I/p 'k'
        vector<int> fib; // to store the fibonacci numbers
        
        // Since the first 2 eleemnts of the sequence are 1, push 1 two times into the 'fib' vector manually
        // vector<int> fib = {1,1};
        fib.push_back(1); 
        fib.push_back(1);

        // Generate the Fibonacci Sequence till 'k' and store it in the 'fib' vector
        for(int i=2; fib[i-1] + fib[i-2] <= k; i++){
            fib.push_back(fib[i-1] + fib[i-2]);
        }

        while(k > 0){
            // If the last element is greater than 'k', then we can't subtract it from 'k', so pop that element from 'fib'
            // and go to the next iteration
            if(fib.back() > k){
                fib.pop_back();
                continue; // don't execute below statements and directly go to next iteration.
            }

            // else, subtract the last element of 'fib' from 'k'
            k -= fib.back(); 
            // No need to pop the fib.back() since we can use a number multiple times as given in the Question
            ans++; // since we removed some fibonacci integer from 'k', increment 'ans'
        }
        return ans;
    }
};
