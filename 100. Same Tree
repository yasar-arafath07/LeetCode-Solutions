/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution{
public:
    bool isSameTree(TreeNode* p, TreeNode* q){
        // Approach: RECURSION
        // TC : O(N)
        // SC : O(N), if we consider the space required by the Recursion stack. else it will be O(1)
        // C++ CODE:
        // Case1:
        if(p == NULL && q == NULL) return true;
        // Case2:
        if(p == NULL || q == NULL) return false;
        // Case3:
        if(p->val != q->val) return false; 
        // call the function recursively for left and right subtree
        return (isSameTree(p->left, q->left) && isSameTree(p->right, q->right));
    }
};
