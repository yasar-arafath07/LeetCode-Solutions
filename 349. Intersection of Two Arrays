class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        
        // APPROACH 1: Using SET Data Structure & Vectors.
        
        set<int> s(nums1.begin(), nums1.end()); // Copying All Elements of nums1 Vector into Set s.
        vector<int> v;  // Maintaining an Empty Vector to Store the Result.
        
        for(int i : nums2){      // i.e Iterate through the Elements of nums2 Array
            if(s.erase(i))      // i.e if the element i in nums2 is also present in set s, then we push it into vector.
                v.push_back(i);
        }
        return v;
        
        
        
        /*
        // APPROACH 2: Using Set Data Structure.
        
        vector<int> ans; // Initialize an empty vector to hold the result
        set<int> s(nums1.begin(), nums1.end());  //Storing elements of 1st array into a set, so we can get rid of duplicacy
        
        for(int x : nums2){           // Iterate through the elements of second array
            if(s.find(x) != s.end()){ //Check if element of second array is present in the set created from 1st array.
                ans.push_back(x);    // push matched element into result
                s.erase(x);    // remove element from the set, so we will not face any duplicacy in the next iteration
            }
        }
        return ans;
        */
        
        
    }
};

/*
// APPROACH 1: Steps
Step1: Take a 'Set' Data Structure 's' and Copy all the Elements of 'nums1' Vector into set s, so that we can get rid of Duplicates.
Step2: Initialize an Empty Vector to hold the Result.
Step3: Iterate through all the Elements of 2nd Array.
Step4: While Iterating, if the erase() function works for that particular 'i' i.e if the erase() function gives true, which means that the element i is present in 
       both 1st and 2nd vector.
Step5: Push the Element into the result vector v if it is present in both Array 1 and 2.
*/
