// The API isBadVersion is defined for you.
// bool isBadVersion(int version);

class Solution{
public:
    int firstBadVersion(int n){
        // Approach: BINARY SEARCH
        // TC : O(logN)
        // SC : O(1)
        // CODE:
        int low = 1;
        int high = n;

        while(low <= high){
            // calculate mid
            int mid = low + (high-low)/2;

            if(isBadVersion(mid) == false){
                // search on the right of mid
                low = mid + 1;
            }
            else{
                // if(isBadVersion(mid) == true), then search on the left side until the first bad version is found
                high = mid - 1;
            }
        }
        return low; // since there will always be a bad version and low will be pointing to the first bad version in
                    // in the end, return low here
    }
};
