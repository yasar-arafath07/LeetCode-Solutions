class Solution{
public:
    int search(vector<int>& nums, int target){
        // Approach 2: BINARY SEARCH ALGORITHM
        // TC : O(logN)
        // SC : O(1)
        // CODE:
        int low = 0; // starting index
        int high = nums.size()-1;  // last index
        
        while(low <= high){
            // find the mid index of the array
            int mid = low + ((high-low)/2);  // mid = (low + high)/2

            // now compare
            if(target == nums[mid]){
                return mid;
            }
            else if(target < nums[mid]){
                high = mid - 1;
            }
            else{
                // if(target > nums[mid])
                low = mid + 1;
            }
        }
        // if target element is not found, return -1
        return -1;
    }
};



        /*
        // Approach 1: BINARY SEARCH ALGORITHM
        // TC : O(logN)
        // SC : O(1)
        // CODE:
        
        int low = 0; 
        int high = nums.size()-1;
        
        while(low <= high){
            int mid = low + (high-low)/2;    //  mid = (low + high)/2;
            if(nums[mid] == target){
                return mid;
            }
            else if(nums[mid] < target){
                low = mid + 1;
            }
            else{
                // if(nums[mid] > target)
                high = mid -1;
            }
        }
        // if element is not found, return -1
        return -1;
        
    }
};
*/



/* 
- There is a C++ STL in-built function called 'binary_search()' which takes 3 parameters.
- Syntax: binary_search(nums.begin(), nums.end(), target);
- binary_search(nums.begin(), nums.end(), target); will perform binary search algorithm on nums array for finding the   target element from the beginning of the array till the end.
*/
