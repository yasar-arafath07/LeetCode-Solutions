class Solution {
public:
    vector<int> findAnagrams(string s, string p){
        // Approach : SLIDING WINDOW (DGs)
        // TC : O(N+M), where 'N' and 'M' are the no. of characters in the input string and the pattern respectively.
        // SC : O(M), since in the worst case, the whole pattern can have distinct characters which will go into map.
        unordered_map<char,int> map; // to store the frequency of characters of string 'p'
        int matched = 0;
        int i = 0; // windowStart
        int j = 0; // windowEnd

        // store the frequencies of the character from 'p' string inside a map
        for(auto it : p){
            map[it]++;
        }

        vector<int> res; // to store the indices of starting index of anagrams
        // our goal is to match all the characters from the map with the current window
        for(int j=0; j<s.length(); j++){
            // CASE 1: If s[j] is present in the map
            if(map.find(s[j]) != map.end()){
                map[s[j]]--; // decrement the frequency of the matched character
                // After decrementing the frequency, if the frequency becomes 0, then do matched++
                if(map[s[j]] == 0){
                    matched++;
                }
            }

            // CASE 2: If the condition is met i.e, if we found an Anagram
            if(matched == map.size()){
                res.push_back(i); // push the starting index of the anagram into the result vector
            }

            // CASe 3: If the size of the window becomes greater than the size of pattern 'p', then we shrink the 
            // window. But, before shrinking the window, check if that character is present in the map and do
            // necessary operations.
            if(j-i+1 >= p.length()){  // OR if(j >= p.length()-1)
                if(map.find(s[i]) != map.end()){ // if s[i] is present in the map
                    if(map[s[i]] == 0){
                        matched--;
                    }
                    map[s[i]]++;
                }
                i++;
            }
        }
        return res;
    }
};
