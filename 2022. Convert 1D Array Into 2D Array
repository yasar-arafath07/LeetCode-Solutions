class Solution{
public:
    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n){
        // Approach: BRUTE FORCE
        // TC : O(N), where N is the length of the original Array
        // SC : O(1)
        // C++ CODE:
        int len = original.size();

        // EDGE CASE: If the re are not enough elements, just return empty vector
        if(len != m*n) return {};

        vector<vector<int>> res(m, vector<int> (n)); //  Create a 2D vector of size m cross n 

        int x = 0; // create a pointer which will point to 0th index initially of 1D Array
        // Traverse the Array and insert it in the matrix according to the procedure
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                // Insert/Place the elements
                res[i][j] = original[x];
                x++; // move the pointer
            }
        }
        return res;
    }
};
