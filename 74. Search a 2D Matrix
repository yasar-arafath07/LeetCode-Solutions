class Solution{
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target){
        // Approach 2: BINARY SEARCH (AV)
        // TC : O(m+n), where n is the size of the matrix and m is the size of the column (no.of columns)
        // SC : O(1)
        // CODE:
        int n = matrix.size();
        int m = matrix[0].size(); // size of 1st column

        int i = 0;
        int j = m-1; // j will point to top right corner initially from where we start our comparison

        // boundary condition
        while(i>=0 && i<n && j>=0 && j<m){
            // start comparing
            if(matrix[i][j] == target){
                // if target is found
                return true;
            }
            else if(matrix[i][j] > target){
                // move to previous column
                j--;
            }
            else if(matrix[i][j] < target){
                // search on downside
                i++;
            }
        }
        return false;



        /*
        // Approach 1: BRUTE FORCE
        // Time Complexity : O(m*n)
        // Space COmplexity : O(1)
        for(int i=0; i<matrix.size(); ++i){
            for(int j=0; j<matrix[0].size(); ++j){  // matrix[0].size(); i.e size of column
                if(matrix[i][j] == target){
                    return true;
                }
            }
        }
        return false;
        */
    }
};
