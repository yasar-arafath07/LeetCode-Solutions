class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        //APPROACH 2: Optimized
        int n = nums.size();
        int i, j;
        //Step 1: Finding the breakpoint i.e finding the index where nums[i] < nums[i+1];
        for(i=n-2; i>=0; i--){  //why i=n-2;? and not n-1;? because anyways we are comparing with (i+1)th element.
            if(nums[i] < nums[i+1]){
                break;
            }
        }
    
        if(i<0){  // i.e if there is no breakpoint i.e if there is no such index where nums[i]<nums[i+1].
            reverse(nums.begin(), nums.end()); //for eg if nums=[3,2,1], then just reverse it to find next permutation.
        }
        else{  // Step 2: Finding a index which is actually having a value greater than the index i value.
            for(j=n-1; j>=0; j--){  // should be actually j>=i;
                if(nums[j] > nums[i]){
                    break;
                }
            }
            //Step 3: Swap the values at nums[i] and nums[j].
            swap(nums[i], nums[j]);
            //Step 4: Reverse all the elements lying right to (index i + 1).
            reverse(nums.begin()+i+1, nums.end());
        }
        
        
        
        /*
        //APPROACH 1: Using next_permutation function    
        next_permutation(nums.begin(), nums.end());
        */
    }
};

/* next_permutation(array_name.begin(), array_name.end()); is a library function that does the job of finding the next permutation of a given array, even going from 
   totally reverse sorted to sorted. */

/*
//BRUTEFORCE APPROACH:
~ Generate all possible combinations of the array elements and after generating all possible combos we linearly check for the given array and find it's next 
  permutation.
eg: If the given array, nums = [1,3,2], then all possible combos are:
[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2] and [3,2,1].
~And if the given array is the last dictionary order,  the answer will always be the first combo.(eg: If the array is [3,2,1], then the next permutation is [1,2,3]).
//Time Complexity: O(N!*N), because there are N! orders and N is the length of every array.
*/

/*
//OPTIMIZED APPROACH:
- Optimal Approach uses linear time complexity
ALGORITHM: (with eg: nums = [1, 3, 5, 4, 2])
Step1: Linearly Traverse from the backside(right) of the given Array or String and while traversing, find the first index 'i' such that nums[i]<nums[i+1]. 
       (here that index i is 1 having element 3. so index1 = 1)
Step2: Again do a linear traversal from the back and find the index which is actually having a value greater than the index i value. (so here, while traversing from 
       back, element 4 is greater than 3. so index2 = 3)
Step3: Swap the values at index1 and index2. (so we get nums = [1, 4, 5, 3, 2]).
Step4: Reverse everything to the right of (index 1 + 1).(so index1 is having 4. So reverse everything from index 2 till end. So we get nums = [1, 4, 2, 3, 5] which 
       is the required next permutation).
//TIME COMPLEXITY: step1 takes O(n) + step2 takes O(n) + step4 takes O(n) = O(n) + O(n) + O(n) = O(3n) = O(n).
//SPACE COMPLEXITY: O(1) because we are not using any extra space. We are doing it in place of the Array that is given
*/
