class Solution{
public:
    int maxSum(vector<vector<int>>& grid){
        // Approach: BRUTE FORCE
        // TC : O(n * m)
        // SC : O(1)
        // C++ CODE:
        int n = grid.size();
        int m = grid[0].size();
        int sum = 0; // to store the current sum of the elements of an hourglass
        int maxi = INT_MIN; // to store themaximum sum of the elements of an hourglass

        // Traverse each row of the I/p matrix 'grid'
        for(int i=0; i<n-2; i++){
            // For each row, traverse each column
            for(int j=0; j<m-2; j++){
                // calculate the hourglasss sum for the current element 'grid[i][j]'
                sum = grid[i][j] + grid[i][j+1] + grid[i][j+2] + grid[i+1][j+1] + grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2];
                maxi = max(maxi, sum); // record the maximum sum of elements of an hourglass
            }
        }
        return maxi;
    }
};

/*
// HOURGLASS REPRESENTATION:
// SHAPE of an HOURGLASS

(grid[i][j]   + grid[i][j+1]   + grid[i][j+2]  
             + grid[i+1][j+1] 
grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2])

*/
