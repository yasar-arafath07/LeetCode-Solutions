class Solution{
public:
    int minGroups(vector<vector<int>>& intervals){
        // Approach: SORTING + PRIORITY QUEUE (MIN HEAP)
        // TC : O(N * logN)
        // SC : O(N)
        // C++ CODE:
        priority_queue<int, vector<int>, greater<int>> pq; // MIN HEAP to store the end of each interval

        // sort the I/p Array 'intervals'
        sort(intervals.begin(), intervals.end());

        pq.push(intervals[0][1]); // push the 'right' of intervals[0] into the priority queue 

        // Traverse the i/p Array 'intervals'
        for(int i=1; i<intervals.size(); i++){
            // If the current interval doesn't merges with the top of queue, then we pop the topmost element and then we push
            // the current intervals end to queue
            if(pq.top() < intervals[i][0]){
                pq.pop();
                pq.push(intervals[i][1]);
            }
            // else, we directly push the end of the current interval into the priority queue
            else{
                pq.push(intervals[i][1]);
            }
        }
        // return the no. of elements in the priority queue which will tell us the minimum no. of groups we need to make 
        return pq.size();
    }
};
