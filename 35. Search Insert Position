class Solution{
public:
    int searchInsert(vector<int>& nums, int target){
        /*
        // Approach 2: BINARY SEARCH
        // TC : O(log N)
        // SC : O(1)
        // C++ CODE:
        int low = 0;
        int high = nums.size()-1;
        
        // Traverse till 'low' and 'high' collide with each other
        while(low <= high){
            int mid = low + (high - low)/2;   // i.e mid = (low + high)/2
            
            // If 'target' is gretaer than the 'mid' element, update 'low'
            if(target > nums[mid]){
                low = mid + 1;
            }
            // else, update 'high'
            else{
                high = mid - 1;
            }
        }
        // return the position to insert
        return low;
        */
        
        
        

        // Approach 1: BINARY SEARCH
        // TC : O(logN)
        // SC : O(1)
        // C++ CODE:
        int low = 0;
        int high = nums.size()-1;
        
        // Traverse till the condition holds true
        while(low <= high){
            // calculate mid
            int mid = low + (high - low)/2;   // i.e mid = (low + high)/2
            
            // If 'target' element is greater than the 'mid' element, then update 'low'
            if(target > nums[mid]){
                low = mid + 1;
            }
            // If 'target' element is lesser than the 'mid' element, then update 'high'
            else if(target < nums[mid]){
                high = mid - 1;
            }
            // If 'target' element is equal to 'mid' element, then return 'mid' which will be the insertion position.
            else{
                return mid;
            }
        }
        // return the index of insertion which is 'low'
        return low;
    }
};
