class Solution{
public:
    int maxOperations(vector<int>& nums, int k){
        // Approach: SORTING + TWO POINTERS
        // TC : O(NlogN)
        // SC : O(1)
        // Use HashMap to optimize TC (Similar to Two Sum)
        // C++ CODE:
        // sort the i/p Array
        sort(nums.begin(), nums.end());

        int n = nums.size();
        int i = 0; // pointer 1
        int j = n-1; // pointer 2
        int res = 0; // total no. of operations we need to perform

        // Traverse till 'i' and 'j' meet each other
        while(i < j){
            // int sum = nums[i] + nums[k];
            if(nums[i] + nums[j] == k){
                res++;
                i++; // move 'i' forward
                j--; // move 'j' backward
            }
            // else if the sum is greater than target, move the 'j' backward 
            else if(nums[i] + nums[j] > k){
                j--;
            }
            else{
                // if sum is lesser than 'k', then we move 'i' forward
                i++; // move 'i' forward
            }
        }
        return res;
    }
};
