class Solution {
public:
    int removeDuplicates(vector<int>& nums){
        // Approach : 2 pointers (DG's)
        // TC : O(N)
        // SC : O(1)
        // CODE:
        int nextNonDuplicate = 1; // stores the index of the next non-Duplicate element

        for(int i=0; i<nums.size(); i++){
            if(nums[nextNonDuplicate-1] != nums[i]){
                nums[nextNonDuplicate] = nums[i];
                nextNonDuplicate++;
            }
        }
        return nextNonDuplicate;


        /*
        // TWO POINTER APPROACH : 2
        int n = nums.size();
        if(n<2)  // if there is only 1 or 0 element, then return that.
            return n;
        int count=1, left=0;
        for(int right=1; right<n; right++){
            if(nums[left] != nums[right]){
                left++;
                nums[left] = nums[right];
                count++;
            }
        }
        return count;
        */
        
        
        
        /*
        // TWO POINTER APPROACH : 1
        if(nums.size() == 0)
            return 0;
        int left = 0;
        for(int right=1; right<nums.size(); right++){
            if(nums[left] != nums[right])
                left++;
                nums[left] = nums[right];
        }
        return left+1;
        */
    }
};


/*
APPROACH : TWO POINTER (left & right)
TIME COMPLEXITY : O(N)
SPACE COMPLEXITY : O(1)
*/
