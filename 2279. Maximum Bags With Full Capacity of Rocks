class Solution{
public:
    int maximumBags(vector<int>& capacity, vector<int>& rocks, int additionalRocks){
        // Approach: GREEDY (SORTING)
        // TC : O(NlogN)
        // SC : O(1)
        // C++ CODE:
        int n = rocks.size();
        int count = 0;

        // store the Additional Space in 'rocks' we have left to store the 'additionalRocks' 
        for(int i=0; i<rocks.size(); i++){
            rocks[i] = capacity[i] - rocks[i];
        }

        // sort the new 'rocks' Array which tells us the no. of remaining spaces left for 'additionalRocks' to add
        sort(rocks.begin(), rocks.end());

        // Traverse the 'rocks' Array.
        for(int i=0; i<rocks.size(); i++){
            // If we reach full capacity i.e <=0, then count++
            if(rocks[i] - additionalRocks <= 0){
                count++;
                additionalRocks -= rocks[i]; // update the new 'additionalRocks' remaining
            }
        }
        return count; // return the number of full capacity bags we got
    }
};



/*
// Explanation to the Proble:
- In eg1: We have 2 'additionalRocks'. So, out of 2, 1 we can store it in rocks[0] so that rocks[0] now becomes 2 and 
  capacity[0] - rocks[0] becomes 0 now which means now we have full capacity for Bag 0.
- And the other remaining 1 'additionalRocks', we put it in Bag2 where we have 1 space left i.e capacity[1]-rocks[1]=1
  So, after adding there, now capacity[1] - rocks[1] = 3-(2+1) = 3-3 = 0. which is full capacity.
- And Bag3 is already in full capacity since capacity[2] - rocks[2] = 0. 
- So, in total we have 3 bags with full capacity.
- So, return 3.   
*/
