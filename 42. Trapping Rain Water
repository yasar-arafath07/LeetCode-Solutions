class Solution{
public:
    int trap(vector<int>& height){
        // Approach : TWO POINTERS (Striver)
        // TC : O(N)
        // SC : O(1)
        // CODE:
        int n = height.size();
        int left = 0; // pointer 1
        int right = n-1; // pointer 2
        int res = 0; // initially we don't have any water
        int maxleft = 0; // this will store the maximum element from the left side as we move 'left' pointer forward
        int maxright = 0; // this will store the maximum element from the right side as we move 'right' pointer back

        while(left < right){
            if(height[left] < height[right]){  // making sure that there is a larger bar in the right side 
                // If there is a larger bar previously
                if(height[left] > maxleft){
                    maxleft = height[left];
                }
                else{  // means, there is a bigger bar previously than current bar. So, water can fit in current bar
                     res += (maxleft - height[left]);  // res = res + (maxleft - height[left]);
                     left += 1; // left++;
                }
            }
            // if(height[left] > height[right])
            else{  // making sure that there is a larger bar on the left side
                if(height[right] > maxright){
                    maxright = height[right];
                }
                else{ // means, there is a bigger bar previously than current bar. So, water can fit in current bar
                    res += (maxright - height[right]);  // res = res + (maxright - height[right]);
                    right -= 1; // right--;
                }
            }
        }
        return res;  // return the result
    }
};


/*
// BRUTE FORCE:
- At Every Index, calculate the amount of water trapped (catched)
- It is calculated by, min(maxleft, maxright) - height[i]
// TC : O(N^2)
// SC : O(1)


// OPTIMAL:
- Use prefix and suffix


// MOST OPTIMAL: TWO POINTERS

*/
