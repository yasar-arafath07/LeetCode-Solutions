class Solution{
public:
    int countDistinct(vector<int>& nums, int k, int p){
        // Approach: Using SET
        // DRY RUN for Better Understanding
        // TC : O(N^2)
        // SC : 
        // C++ CODE:
        int n = nums.size();
        set<vector<int>> ans; // size of set will give us the subarray count which have atmost k elements divisible by p
        
        // fix i at a position
        for(int i=0; i<n; i++){
            vector<int> v;
            int count = 0;
            for(int j=i; j<n; j++){
                v.push_back(nums[j]); // push the current element nums[j] into the vector v
                // check if nums[j] is divisible by p
                if(nums[j] % p == 0){
                    count++;
                }
                if(count > k){
                    // then there is no point in further traversal. So, break the inner for loop
                    break; 
                }
                else{
                    ans.insert(v);
                }
            }
        }
        return ans.size(); 
    }
};
