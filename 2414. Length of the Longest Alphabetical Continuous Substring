class Solution{
public:
    int longestContinuousSubstring(string s){
        // Approach: SLIDING WINDOW (TWO-POINTERS)
        // TC : O(N)
        // SC : O(1)
        // C++ CODE:
        int maxi = 1; // since there will be always a single alphabetical continuous string which will be a single
        // letter of 's' itself
        int i = 0; // pointer 1
        int j = 1; // pointer 2

        // loop through 's'
        while(j < s.size()){
            // check for the alphabetical continuous string condition
            if(s[j] - s[j-1] == 1){
                // keep moving j to the right
                j++;
                maxi = max(maxi, j-i);
            }
            else{
                // if(s[j] - s[j-1] != 1), means if it is not the alphabetical continuous string, then make i point to
                // where j is currently pointing to and then increment j
                i = j;
                j++;
            }
        }
        return maxi;
    }
};
