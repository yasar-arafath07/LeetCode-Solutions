class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        // APPROACH: Using Sorting and 2 Pointers.
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        
        vector<int> res;
        int i=0, j=0;
        
        while(i<nums1.size() && j<nums2.size()){
            if(nums1[i] == nums2[j]){
                res.push_back(nums1[i]);
                i++;
                j++;
            }
            else if(nums1[i] < nums2[j]){
                i++;
            }
            else{
                j++;
            }
        }
        return res;
    }
};


/*
// TIME COMPLEXITY: O(nlogn).
// SPACE COMPLEXITY: No Extra Space.
*/


/*
Step1: Sort both the given Arrays.
Step2: Take an Integer Vector to Store the Result.
Step3: Take 2 Pointers 'i' and 'j' to iterate through nums1 and nums2 respectively.
Step4: We Iterate through both Vectors using 2 Pointers 'i' and 'j' until any one of the Pointer points to Memory Location which is out of bound.
Step5: If we found Element Pointed by both Pointers are Equal, then Insert(push) that element into the Output Vector and Increment both the Pointers.
Step6: Else If Elements pointed by both Pointers are not equal, then Increment that pointer which points to Lower Value. 
Step7: Return the result Vector.
*/
