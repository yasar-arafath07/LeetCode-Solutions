class Solution{
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals){
        // Approach: SORTING
        // TC : O(N * logN)
        // SC : O(1), excluding the space required to create the 'ans' vector
        // C++ CODE:
        vector<vector<int>> ans; // to store the merged interval

        // sort the I/p Array 'intervals'
        sort(intervals.begin(), intervals.end());

        ans.push_back(intervals[0]); // insert the 1st interval into the 'ans' vector

        // Traverse the I/p Array 'intervals'
        for(int i=1; i<intervals.size(); i++){
            if(ans.back()[1] >= intervals[i][0]){
                // then we can merge the 2 intervals
                ans.back()[1] = max(ans.back()[1], intervals[i][1]); // update the 'end' of last interval in 'ans'
            }
            else{
                // we can directly push the current interval into the 'ans' vector
                ans.push_back(intervals[i]);
            }
        }
        return ans;
    }
};
