class Solution{
public:
    int singleNumber(vector<int>& nums){
        // Approach 2: SORTING 
        // Use Bit Manipulation for linear runtime complexity 
        // TC : O(NlogN)
        // SC : O(1)
        // C++ CODE:
        int n = nums.size();

        // sort the array
        sort(nums.begin(), nums.end());
        
        // EDGE CASE 1: If there is only 1 element in nums, return that element
        if(n == 1) return nums[0];  // eg Test Case: nums = [1]

        // EDGE CASE 2: If 1st element is not equal to the 2nd element of nums, then return the 1st element
        if(nums[0] != nums[1]){
            return nums[0]; // eg: nums = [-4,-2,-2,-2,1,1,1,4,4,4]
        } 
        
        // EDGE CASE 3: If last element is not equal to the 2nd last element of nums, then return the last element
        if(nums[n-1] != nums[n-2]){
            return nums[n-1];
        }

        // loop through nums
        for(int i=1; i<nums.size()-1; i++){
            if(nums[i] != nums[i-1] && nums[i] != nums[i+1]){
                return nums[i];
            }
        }
        return -1;
    


        /*
        // Approach 1: Using MAP 
        // TC : O(N)
        // SC : O(N)
        // C++ CODE:
        unordered_map<int,int> mpp;
        
        // store the frequency of each element inside the map
        for(int i=0; i<nums.size(); i++){
            mpp[nums[i]]++;
        }

        // traverse the map
        for(auto it : mpp){
            if(it.second == 1){
                return it.first;
            }
        }
        return 0;
        */
    }
};
