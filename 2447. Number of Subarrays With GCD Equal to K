class Solution{
public:
    int subarrayGCD(vector<int>& nums, int k){
        // Approach: 
        // TC : O(N^2)
        // SC : O(1)
        // CODE:
        int n = nums.size();
        int count = 0; //to store the count of the subarrays with GCD equal to k

        for(int i=0; i<n; i++){
            int current_gcd = 0;  // OR nums[i] 
            for(int j=i; j<n; j++){
                current_gcd = gcd(current_gcd, nums[j]);
                // now compare current_gcd with k
                if(current_gcd == k){
                    count++;
                }
            }
        }
        return count;
    }
};



/*
// EXPLANATION:
- GCD of (0,n) is n.
- GCD of (n,0) is n.
- Iterate Over all the Subarrays and check if GCD equals k
- If yes, Increment the counter.
*/


/*
// Function to Calculate GCD of 2 integers a and b
int gcd(int a, int b){
    while(b != 0){
        int temp = b;
        b = a%b;
        a = temp;
    }
    return a;  // returns a when b becomes 0
}
*/
