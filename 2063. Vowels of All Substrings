class Solution{
public:
    long long countVowels(string word){
        // Approach: 
        // TC : O(N)
        // SC : O(1)
        // C++ CODE:
        long long n = word.length();
        long long res = 0;

        // loop through the string word
        for(int i=0; i<word.length(); i++){
            // check if word[i] is a vowel or not
            if(string("aeiou").find(word[i]) != string::npos){
                res += (i+1)*(n-i);
            }
        }
        return res;
    }
};


/*
// EXPLANATION:
- for each vowels s[i], it could be in the substring starting at s[x] and ending at s[y], where 0<=x<=i and i<=y<n.
- i.e, (i+1) choices for x and (n-i) choices for y.
- So, there are (i+1)*(n-i) substrings containing s[i].
*/


/*
// What is string::npos ?
- It is a constant static member value with the highest possible value for an element of type size t.
- It actually means until the end of the string.
- It is used as the value for a length parameter in the string's member functions.
- As a return value, it is usually used to indicate no matches.
*/
