class Solution{
public:
    bool buddyStrings(string s, string goal){
        // Approach:
        // TC : O(N)
        // SC : 
        // C++ CODE:
        int n = s.size();

        // Edge Case: If the strings 's' and 'goal' are equal initially, just check whether 's' contains some duplicate
        // letters we can swap to meet the one-swap condition.
        if(s == goal){
            return (set<char> (s.begin(), s.end()).size() < n);
        }
        
        // if the 2 strings are not equal
        int l = 0;
        int r = n-1;

        while(l < n && s[l] == goal[l]){
            l++;
        }
        while(r >=0 && s[r] == goal[r]){
            r--;
        }
        if(l < r){
            swap(s[l], s[r]);
        }
        return s == goal;
    }
};
