class Solution{
public:
    vector<int> productExceptSelf(vector<int>& nums){
        // Approach: Using PREFIX (Left Product) & SUFFIX Product (Right Product)
        // TC : O(N)
        // SC : O(1)
        // CODE:
        int n = nums.size();
        vector<int> ans(n);

        ans[0] = 1;  // store 1 as 1st element in ans vector

        // Tarverse from start till end
        for(int i=1; i<n; i++){
            // calculate Left product (prefix) and insert it in ans
            ans[i] = ans[i-1] * nums[i-1];
        }

        // Traverse from end till start 
        int right = 1; // this variable is to store the current suffux (right) product
        for(int i=n-1; i>=0; i--){
            // update the product by calculating the right product (suffix product)
            ans[i] = ans[i] * right;  // ans[i] *= right
            right = right * nums[i]; // right *= nums[i]
        }
        return ans; 
    }
};
