class Solution{
public:
    bool divideArray(vector<int>& nums){
        // Approach 2: Using HASHMAP
        // TC : O(N)
        // SC : O(N) [Better SC in Brute Force]
        // C++ CODE:
        int n = nums.size();
        unordered_map<int,int> mpp; // to store the frequency of elements
        
        // traverse through the array and store the frequency in the HashMap
        for(auto& it : nums){
            mpp[it]++;
        }

        int total_Pairs = 0;

        // traverse through the HashMap
        for(auto it : mpp){
            total_Pairs += it.second/2;
        }
        
        // return (total_Pairs == n/2);
        if(total_Pairs == n/2) return true;
        return false;



        /*
        // Approach 1: BRUTE FORCE (Has better SC) 
        // TC : O(NlogN)
        // SC : O(1)
        // C++ CODE:
        int n = nums.size();

        // sort the array
        sort(nums.begin(), nums.end());

        // loop through the array
        for(int i=1; i<n; i+=2){
            if(nums[i-1] != nums[i]){
                return false; // increment i by 2 
            }
        }
        return true;
        */
    }
};
