class Solution{
public:
    bool checkStraightLine(vector<vector<int>>& coordinates){
        // Approach: BRUTE FORCE
        // TC : O(N)
        // SC : O(1)
        // C++ CODE:
        // EDGE CASE: 
        if(coordinates.size() <= 2) return true; // because 2 points OR 1 point will always form a straight line to each
        // other. So, the slope will be same.

        int x1 = coordinates[0][0]; // x1
        int y1 = coordinates[0][1]; // y1 
        int x2 = coordinates[1][0]; // x2
        int y2 = coordinates[1][1]; // y2

        // slope = (y2 - y1) / (x2 - x1) for 2 points in a line

        for(int i=2; i<coordinates.size(); i++){
            int x3 = coordinates[i][0]; // current point x3
            int y3 = coordinates[i][1]; // current point y3
            
            // Now, we have 3 points: (x1,y1), (x2,y2) and (x3,y3)
            // So, if they make a straight line, their slope should be equal.
            // So, (y3-y1) / (x3-x1) = (y2-y1) / (x2-x1)
            // But, if we apply the above formula below to check, we will get a division by 0 error.
            // So, we cross multiply in the formula and we get the slope formula as: (y3-y1)*(x2-x1) = (y2-y1)*(x3-x1)
            if((y3-y1) * (x2-x1) != (y2-y1) * (x3-x1)){
                return false; // If slope of any 2 points are not equal, return false
            }
        }
        return true;
    }
};
