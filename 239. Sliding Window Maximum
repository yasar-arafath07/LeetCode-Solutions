class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k){
        // Approach : SLIDING WINDOW (AV's)
        vector<int> ans; // this is to store all the max from all the subarrays of size k
        list<int> l; // use deque instead of list or queue if all test cases are not passing
        // we insert only those elements into the lsit from the array which will be helpful for us in the future
        int i = 0; // windowStart
        int j = 0; // windowEnd

        // SLIDING WINDOW Starts
        while(j < nums.size()){
            // If the list is empty, we directly push nums[j] into the list as we slide the window
            if(l.empty()){
                l.push_back(nums[j]);
            }
            else{
                // i.e if there are smaller elements in the list before inserting nums[j], i.e, ifall the elements
                // in the list LHS/before are smaller than nums[j], then we know that those elements are of no use
                // in the future. So we pop them. and then we push nums[j] into the list
                while(!l.empty() && l.back() < nums[j]){
                    l.pop_back();
                }
                l.push_back(nums[j]);
            }

            // If the condition is not met i.e, if the window size k is not met, we increase the tail of the window
            // i.e, we do j++
            if(j-i+1 < k){
                j++;
            }
            
            // If the window size is met, we pick an Answer i.e max
            // maximum element of the window will be present at the front of the list
            else if(j-i+1 == k){
                // Pick an Answer
                // i.e if the window size is met, we push the first element of the list into the ans vector which is 
                // the max element in the window
                ans.push_back(l.front());

                // Now, Slide the Window
                // Before sliding, remove the calculations for nums[i] before doing i++
                if(nums[i] == l.front()){
                    // i.e if nums[i] is the current max in the window, then pop it because once we do i++, nums[i]
                    // won't be part of our window. So we remove it from the list also
                    l.pop_front();
                }
                // Slide the Window
                i++;
                j++;
            }
        }
        return ans;
    }
};
