class Solution{
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval){
        // Approach: GREEDY
        // TC : O(N)
        // SC : O(1), as the output vector 'ans' doesn't count as extra space. We only consider the auxilliary space when it
        // comes to problem like these. So, the Space Complexity here is O(1)
        // C++ CODE:
        int n = intervals.size();
        vector<vector<int>> ans; // to store the final interval after merge operation
        int i = 0; // to traverse the Array 'intervals'

        // CASE #1: When no overlapping of 'newInterval' occurs with the current interval, we directly push the current 
        // interval to the 'ans' vector
        // Here, compare the ending points of 'intervals[i]' to the starting point of 'newInterval'
        while(i < n && intervals[i][1] < newInterval[0]){
            ans.push_back(intervals[i]);
            i++;
        }

        // CASE #2: When there is overlapping of current interval 'intervals[i]' with the 'newInterval' 
        while(i < n && newInterval[1] >= intervals[i][0]){
            newInterval[0] = min(intervals[i][0], newInterval[0]); // update the starting point of 'newInterval'
            newInterval[1] = max(intervals[i][1], newInterval[1]); // update the end point of 'newInterval'
            i++; // move the pointer forward
        }
        ans.push_back(newInterval); // after all, save the merged interval in the 'ans' vector

        // CASE #3: When there is no overlapping of intervals after the merge of 'newInterval'
        // So, in this case we can simply insert the remaining interval into the 'ans' vector
        while(i < n){
            ans.push_back(intervals[i]);
            i++;
        }
        // return the 'ans' vector
        return ans;
    }
};
