class Solution{
public:
    int strStr(string haystack, string needle){
        
        // Approach 2: Similar to approach 1
        // TC : O(M+N), where 'M' is the length of haystack and 'N' is the length of needle
        // SC : O(1)
        // CODE:
        int m = haystack.length();
        int n = needle.length();

        for(int i=0; i<m-n+1; i++){
            // if the substring of haystack is equal to needle, we return the starting index of the substring
            if(haystack.substr(i,n) == needle){
                return i;
            }
        }
        return -1;
    }
    



        /*
        // Approach 1: (TS) {Overflow Error}
        // 2 Steps
        // Step 1: Check if 1st character of 'needle' exist in 'haystack'.
        // Step 2: If the 1st character exist, Check for the substring in 'haystack'

        // BASE CASE:
        if(needle == ""){
            return 0;
        }

        for(int i=0; i<haystack.length()-needle.length()+1; i++){
            // step 1: Check if the first character of needle and the character at haystack are equal
            if(haystack[i] == needle[0]){
                // if they are equal, then only go for step 2
                // step 2 i.e, find the substring i.e, check if the substring of haystack is equal to needle
                if(haystack.substr(i, needle.length()) == needle){ 
                    // then return the 1st index of the substring
                    return i;
                }
            }
        }
        // if there is no such index, we return -1
        return -1;
    }
    */
    
};
