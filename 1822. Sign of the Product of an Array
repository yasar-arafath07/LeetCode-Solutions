class Solution {
public:
    int arraySign(vector<int>& nums) {
        
        // Approach 1: 
        // Time Complexity : O(N)
        // Space Complexity : O(1)
        // CODE: 
        int count_neg = 0;
        
        for(int i=0; i<nums.size(); i++){
            if(nums[i] == 0){
                return 0;  // because if one element of array is 0, when we multiply it, the answer will become 0
            }
            else if(nums[i] < 0){
                count_neg++;
            }
        }
        // So, if the count_neg value is even, then in that case when we multiply array elements, all minus will get cancelled with each other and the answer of 
           product of the array will be above 0. 
        // So we will return 1 in that case. else -1
        if(count_neg % 2 == 0){
            return 1;
        }
        return -1;
        
        
        /*
        // Approach 2: By finding the Product of the entire array (Runtime Error : Overflow)
        // CODE :
        int prod = 1;
        
        //finding the product of the array
        for(auto i : nums){
            prod *= i;  // prod = prod * i;
        }
        if(prod > 0){
            return 1;
        }
        else if(prod < 0){
            return -1;
        }
        return 0;
        */
    }
};
