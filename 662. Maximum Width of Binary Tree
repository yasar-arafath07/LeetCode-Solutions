/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution{
public:
    int widthOfBinaryTree(TreeNode* root){
        // Approach: QUEUE + PAIRS + INDEXING 
        // TC : O(N), since each node is visited once
        // SC : O(N)
        // C++ CODE:
        int ans = 0; // to store the maximum width among all the levels
        queue<pair<TreeNode*,int>> q; // Initialize a queue which stores the nodes along with it's index as a pair

        // push the I/p root along with it's index which is 0 into the queue. Since w.k.t, the root node will have index 0.
        q.push({root, 0}); // OR we can use "q.push(make_pair(root,0));"

        while(!q.empty()){
            int n = q.size();
            int left = q.front().second; // Index of the leftmost node in the current level
            int right = q.back().second; // Index of the rightmost node in the current level
            // int width = right - left + 1;
            ans = max(ans, right-left+1); // Record the maximum width at each level
 
            // Now, insert the childs of the root into the queue if it has child nodes
            for(int i=0; i<n; i++){
                pair<TreeNode*,int> p = q.front(); 
                TreeNode* childNode = p.first; // current node
                long long idx = p.second; // current node's index
                q.pop(); // remove the current node from the queue
                // If the current node has a left child, insert it into the queue along with it's index
                if(childNode->left != NULL){
                    q.push({childNode->left, 2*idx + 1}); 
                }
                // Similarly, if the current node has a right child, insert it into the queue along with it's index
                if(childNode->right != NULL){
                    q.push({childNode->right, 2*idx + 2});
                }
            }
        }
        return ans;
    }
};
