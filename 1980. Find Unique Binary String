class Solution{
public:
    string findDifferentBinaryString(vector<string>& nums){
        // Approach: GREEDY (OBSERVATION)
        // TC : O(N), since we iterate through the I/p Array once
        // SC : O(1), sicne no Extra Space required
        // C++ CODE:
        string ans = ""; // Initialize an empty string to store the answer

        // Traverse each Binary string in the I/p Array 'nums'
        for(int i=0; i<nums.size(); i++){
            // If the 'i'th bit of 'i'th Binary string is '0', insert '1' to the 'ans' string
            if(nums[i][i] == '0'){
                ans += '1';
            }
            // else, Insert '0' to the 'ans' string
            else if(nums[i][i] == '1'){
                ans += '0';
            }
            // ONE LINER: ans += (nums[i][i] == '0') ? '1' : '0';
        }
        return ans;
    }
};



/*
// EXPLANATION: 
- Here we are basically using "Cantor's Diagonalization".
- Since it is given that the no. of bits in each string is equal to number of elements in the Array, what we can do is we
  can create a Binary string 'ans' which differs from 1st Binary string in 1st position, 2nd binary string in 2nd position,
  3rd binary string in 3rd position.... etc and so on till the last string of the i/p Array.
- Now, this will make sure that the Binary string 'ans' which we created is unique since it differs from all other binary
  string present in the Array by atleast 1 position.
- So, Initially we create an 'ans' string and then we simply Iterate throught Binary strings in the I/p Array while
  inserting the flipped bit of 'i'th bit of 'i'th Binary string into the 'ans' string.
*/
