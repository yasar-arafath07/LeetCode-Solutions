class Solution{
public:
    int minimumRounds(vector<int>& tasks){
        // Approach: HASHMAP
        // TC : O(N)
        // SC : O(N)
        // C++ CODE:
        int res = 0;
        unordered_map<int, int> mpp;
        
        // Traverse the i/p Array and store the frequency of the elements in the map
        for(int i=0; i<tasks.size(); i++){
            mpp[tasks[i]]++;
        }

        // Now, traverse the frequency in the map
        for(auto it : mpp){
            // take out the frequency of each element
            int freq = it.second;

            // If the frequency of an element is 1, retur -1 since we can't complete all the tasks (minimum we need 2
            // or 3 tasks of the same difficulty)
            if(freq == 1) return -1;

            // If frequency is a multiple of 3, i.e, if freq%3 == 0, then we have an ans
            if(freq % 3 == 0){
                res += freq/3;
            }
            else{
                // If we get a remander 1 or 2 while dividing by 3, add 1 to freq/3 while calculating res
                res += (freq/3) + 1;
            } 
        }
        return res;
    }
};



/*
// EXPLANATION:
- Create a map and store the frequency of all the elements of the i/p Array in the map.
- Then, Traverse the map and check the frequency
- There are Actually only 3 Possibilities to this Question:
1) If the frequency of a number is 1, then it is not possible to complete all the tasks. So we return -1.
2) If the frequency of a number is directly divisible by 3, then we return frequency/3 which is the total rounds needed.
3) If the remainder of the frequency while dividing by 3 is 1 or 2, then again there are 2 cases:
   a) If the remainder is 1, for eg: If tasks = [a,a,a,a,a,a,a], which has a frequency of 7 for 'a', So 7/3 is 2.
    So, we can form groups like: "aaa", "aaa", "a". So one 'a' is left alone. So, the solution is to break the second 
    last group into two parts of 2 so that the groups becomes like: "aaa","aa","aa" i.e 1 is added to the division by 3.
    i.e, (frequency/3) + 1.
   b) If the remainder is 2, for eg: tasks = [a,a,a,a,a,a,a,a], SO, here frequency is 8. So, 8/3 = 2. So, the groups 
    will look like: "aaa", "aaa", "aa". i.e, two 'a's are left so the solution is to just add 1 i.e, one group of 2 
    to the solution
*/
