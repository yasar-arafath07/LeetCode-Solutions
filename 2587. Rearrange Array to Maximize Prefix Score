class Solution{
public:
    int maxScore(vector<int>& nums){
        // Approach 2: SORTING
        // TC : O(N*logN)
        // SC : O(1)
        // C++ CODE:
        int ans = 0; // to store the count of no. of positive integers in the 'prefix' Array
        long long prefix = 0; // to store the Prefix OR take an 'prefix' vector

        // sort the given I/p Array in the Descending/Reverse Order
        // If nums = [2,-1,0,1,-3,3,-3], then after sort we get: nums = [3,2,1,0,-1,-3,-3]
        sort(nums.begin(), nums.end(), greater<int>());

        // Now, Traverse the I/p Array 'nums' and calculate it's Prefix Sum
        for(int i=0; i<nums.size(); i++){
            prefix += nums[i]; // calculate the Prefix Sum
            // If the Prefix Sum is greater than 0, Increment 'ans'
            if(prefix > 0){
                ans++;
            }
        }
        return ans;



        /*
        // Approach 1: VECTORS + SORTING
        // TC : O(N*logN)
        // SC : O(N + N) = O(2N) = O(N), where 'pos' and 'neg' vectors together costs O(N) and 'prefix' vector takes O(N)
        // C++ CODE:
        int n = nums.size();
        int ans = 0;
        vector<int> pos; // to store the positive Integers
        vector<int> neg; // to store the Negative Integers
        vector<long long> prefix(n); // to store the Prefix Sum
        
        // Traverse the I/p Array and if the element is +ve, Insert it into 'pos'. else, Insert it into 'neg'
        for(int i=0; i<nums.size(); i++){
            if(nums[i] > 0){
                pos.push_back(nums[i]);
            }
            else{
                neg.push_back(nums[i]);
            }
        }
        
        // Now, sort the 'pos' vector in Ascending Order
        sort(pos.begin(), pos.end());
        // and sort the 'neg' vector in Descending Order
        sort(neg.begin(), neg.end(), greater<int>()); // eg: neg = [-1, 0, -3, -3] becomes neg = [0, -1, -3, -3]
        
        // Now, Traverse the 'positive' vector and push the elements into the 'prefix' vector
        for(int i=0; i<pos.size(); i++){
            prefix.push_back(pos[i]);
        }
        // Traverse the 'negative' vector and push the values into the 'prefix' vector 
        for(int i=0; i<neg.size(); i++){
            prefix.push_back(neg[i]);
        }
        // So, now Positive integers appears before the negative integers in the 'prefix' vector so that we can maximize
        // the no. of positive integers in the 'prefix' Array
        
        // Since while calculating the prefix sum below, we start our traversal from the 1st Index. 
        // So, for the 0th Index, check separately if it is Greater than 0. If YES, Increment the 'ans'
        if(prefix[0] > 0){
            ans++;
        }
        
        // Now, Traverse the 'prefix' vector and calculate the Prefix Sum for each Index.
        // If the Prefix Sum at a Index is +ve, then Increment the 'ans'.
        for(int i=1; i<prefix.size(); i++){
            prefix[i] += prefix[i-1];
            if(prefix[i] > 0){
                ans++;
            }
        }
        // Return the 'ans'
        return ans;
        */
    }
};
