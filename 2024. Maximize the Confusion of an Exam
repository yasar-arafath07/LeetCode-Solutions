class Solution{
public:
    int maxConsecutiveAnswers(string answerKey, int k){
        // Approach: SLIDING WINDOW
        // Explanation: If we clearly observe the problem, here we need to find the length of the longest substring
        // in which min(no. of True, no. of False) should be <= k
        // TC : O(N)
        // SC : O(1)
        // C++ CODE:
        int i = 0; // window start
        int j = 0; // window end
        int cntT = 0; // to keep count of 'T'
        int cntF = 0; // to keep the count of 'F'
        int len = 0;

        while(j < answerKey.size()){
            // check if the charcter is T or F and parallelly increment the count of it
            answerKey[j] == 'T' ? cntT++ : cntF++; // if element is T, cntT++. else cntF++
            // find the minimum of cntT and cntF
            int count = min(cntT, cntF);

            // update the length if condition holds
            if(count <= k){
                len = max(len, j-i+1); // 'j-i+1' is the length of the window
            }
            else{
                // shrink the window
                while(count > k){
                    answerKey[i] == 'T' ? cntT-- : cntF--;
                    count = min(cntT, cntF); // update the new count after shrinking the window
                    i++; // slide/shrink the window
                }
            }
            j++; 
        }
        return len;
    }
};
