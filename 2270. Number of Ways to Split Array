class Solution{
public:
    int waysToSplitArray(vector<int>& nums){
        // Approach: PREFIX SUM
        // TC : O(N)
        // SC : O(1)
        // CODE:
        int n = nums.size();
        long long right_sum = 0; // stores the total sum of the Array
        long long left_sum = 0;
        int valid_split = 0;

        // calculating the total sum and storing it in 'right_sum'
        for(int i=0; i<n; i++){
            right_sum += nums[i];  // right_sum = right_sum + nums[i];
        }
        
        // Again traverse the Array from start till 'n-1'th index since i<=n-1
        for(int i=0; i<n-1; i++){
            left_sum += nums[i];  // add nums[i] in 'left_sum'
            right_sum -= nums[i]; // subtract nums[i] from 'right_sum'

            // Now, check whether (left_sum >= right_sum), If YES then increment the 'valid_split' count
            if(left_sum >= right_sum){
                valid_split++;
            }
        }
        return valid_split;
    }
};



/*
// EXPLANATION:
- Iterate over nums and Calculate the total sum of the Array and store it in 'right_sum'
- Again Iterate over nums and add nums[i] to 'left_sum' and subtract nums[i] from 'right_sum'.
- Now, check if the condition (left_sum >= right_sum)
- If the condition is true, increment the 'valid_split' by 1
- Return the 'valid_split'
*/
