/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution{
public:
    ListNode* reverseBetween(ListNode* head, int left, int right){
        // Approach :
        // TC : O(N)
        // SC : O(1)
        // CODE:

        // create a dummy node and connect it with head
        ListNode* dummy = new ListNode(-1);
        dummy->next = head;  // connect dummy node to head
        ListNode* prev = dummy; // initialize a prev pointer and it'll point to dummy node initially
    
        // run a for loop to find the node from where we need to start the reversal
        for(int i=1; i<left; i++){
            prev = prev->next;  // move the prev pointer till the one node before from where we need to actually
        }                       // reverse
        // after the above for loop, prev will be pointing to one node before from where we need to perform the
        // reversal
        ListNode* current = prev->next; // current pointer will point to just one node after prev pointer

        // reversal starts
        // to keep maintain the right val, we again run a for loop
        for(int i=0; i<right-left; i++){
            ListNode* forw = current->next;  // forw pointer will point to next of current i.e after current
            current->next = forw->next;  // DRY run to better understand this
            forw->next = prev->next;
            prev->next = forw; 
        }
        return dummy->next;
    }
};
