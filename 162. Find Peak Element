class Solution{
public:
    int findPeakElement(vector<int>& nums){
        /*
        // Approach 1: BINARY SEARCH (AV)
        // TC : O(logN)
        // SC : O(1)
        // CODE:
        int n = nums.size();
        int low = 0;
        int high = n-1;

        if(n==1) return 0; // to avoid heap/stack overflow

        while(low <= high){
            int mid = low + (high-low)/2;

            // now check if mid element can be our ans (here ans is the peak element)
            // if mid is the 1st element, then there is no 'mid-1' and
            // if mid is the last element, then there is no 'mid+1'. So, to avoid this we write the below condition
            if(mid > 0 && mid < n-1){
                // check the condition for peak element
                if(nums[mid] > nums[mid-1] && nums[mid] > nums[mid+1]){
                    return mid; // if we find the answer, we return the index of that element
                }
                // if nums[mid-1]>nums[mid], then move to left side 
                else if(nums[mid-1] > nums[mid]){
                    high = mid - 1;
                }
                else{
                    // if(nums[mid+1] > nums[mid]), we move to the right of mid
                    low = mid + 1;
                }
            }
            // now check if 1st element is the mid, and also check if it is greater than its right neighbour. 
            // If YES, then it can also be our peak element.
            else if(mid == 0){ // (this condition will be executed when only 2 elements are there and mid is 1st ele)
                // check if mid element is greater than mid+1
                if(nums[mid] > nums[mid+1]){
                    // we found a candidate. So, return it's index
                    return mid;
                }
                else{
                    return mid+1; // if nums[mid] is not > nums[mid+1], then nums[mid+1] is the peak element.
                }            
            }
            // now check if last element is the mid, and also check if it is greater than its left neighbour
            else if(mid == n-1){ // (this condition is executed when only 2 elements are left and mid is the last ele)
                if(nums[mid] > nums[mid-1]){
                    // if last element is greater than it's previous element, we found a peak element. return its index
                    return mid;
                }
                else{
                    return mid-1;
                }
            }
        }  // close of while loop
        return 0;
        */



        // Approach 2: BINARY SEARCH
        // Explanation: Find the mid and if(nums[mid] < nums[mid+1]), then there has to be a peak element in the right
        // side of mid. Either the numbers increase until we reach the end of the array and then the last element will
        // be the peak, OR at some point a number gets smaller and we will find a peak right there.
        // Same applies for left side of mid also
        // TC : O(logN)
        // SC : O(1)
        // CODE:
        int low = 0;
        int high = nums.size()-1;

        while(low < high){  // use (low <= high) when we are expecting to return from the loop itself
            int mid = low + (high-low)/2;

            if(nums[mid] < nums[mid+1]){
                low = mid + 1;
            }
            else{
                // if(nums[mid] > nums[mid+1])
                high = mid;  // high = mid, because if we do high = mid-1 and if mid is the peak, we loose our answer
            }
        }
        return low;
    }
};

/*
Why we did high = mid; instead of high = mid - 1 ?
Ans: Consider the Array, arr = [1,2,4,5,4,2,1]
Here, low = 0, high = 6 and mid = 3 initially 
- We can see that arr[mid] > arr[mid+1] i.e 5 > 4, So, if we do high = mid-1, then high will point to element 4 (index 2)
- But if we do that we are loosing our actual answer which is element 5 which is the peak element
- So, to avoid this, we write it as high = mid;
*/
