class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums){
        // Approach 2: 2 Pointers (DG's)
        // TC : O(N)
        // SC : O(N)
        // CODE:
        int n = nums.size();
        vector<int> ans(n); // to store the squares of the elements
        int highestSquareIndex = n-1; 
        int left = 0; // pointer 1
        int right = n-1; // pointer 2

        while(left <= right){
            int leftSquare = nums[left] * nums[left];
            int rightSquare = nums[right] * nums[right];

            if(leftSquare > rightSquare){
                ans[highestSquareIndex] = leftSquare;
                highestSquareIndex--; // OR write directly highestSquareIndex-- in above line
                left++;
            }
            // if(leftSquare < rightSquare), then we insert rightSquare at the highest Index
            else{
                ans[highestSquareIndex] = rightSquare;
                highestSquareIndex--; // OR write directly highestSquareIndex-- in above line
                right--;
            }
        }
        return ans; 



        /*
        // Approach 1: Using sort() function
        for(int i=0; i<nums.size(); i++){
            nums[i] = nums[i] * nums[i];
        }
        sort(nums.begin(), nums.end());
        return nums;
        */
    }
};
