class Solution{
public:
    bool isNStraightHand(vector<int>& hand, int groupSize){
        // Approach: HASHMAP
        // EXPLANATION: DRY RUN for the given both TestCases for better understanding
        // TC : O(NlogM), where 'M' is the no. of different cards
        // SC : O(N)
        // C++ Code:
        map<int,int> mpp; // to store the frequency of array elements

        // loop through the array and store the frequency in the HashMap
        for(auto& x : hand){
            mpp[x]++;
        }
        
        // traverse the map
        auto it = mpp.begin(); // iterator 'it' will initially points to the starting of the map

        while(it != mpp.end()){
            if(it->second != 0){
                int freq = it->second;  // frequency of the element of the map
                // So, from the current i till kth element, each element should appear freq no. of times
                // then only we can form group with consecutive cards/elements

                // now run a loop for 'groupSize' no. of times since we need that many no. of elements in each group
                for(int i=0; i<groupSize; i++){
                    if(mpp[it->first + i] < freq) return false;
                    // else decrement the count of mpp[it->first + i] in the map
                    mpp[it->first + i] = mpp[it->first + i] - freq;  // mpp[it->first + i] -= freq;
                }
            }
            // move the iterator
            it++;
        }
        return true;
    }
};
