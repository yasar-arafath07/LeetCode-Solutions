/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution{
public:
    TreeNode* invertTree(TreeNode* root){
        // Approach: RECURSION
        // TC : O(N)
        // SC : O(N), space required for the Recursion Stack
        // C++ CODE:
        // BASE CASE:
        if(root == NULL){
            return root;
        }
        // swap the values at left node and right node
        swap(root->left, root->right);
        invertTree(root->left); // call the function recursively for the Left node
        invertTree(root->right); // call the function recursively for the Right node
        return root;
    }
};
