class Solution{
public:
    int maxFrequency(vector<int>& nums, int k){
        // Approach: SLIDING WINDOW
        // TC : O(sort)
        // SC : O(sort)
        // C++ CODE:
        int i = 0; // window start
        int j = 0; // window end
        long sum = 0;
        int ans = 1;

        // sort the Array
        sort(nums.begin(), nums.end());

        for(int j=0; j<nums.size(); j++){
            sum += nums[j]; // sum = sum + nums[j]
            
            // if (sum + k < nums[j]*(j-i+1)), then slide the window till sum+k >= nums[j]*windowSize is reached
            while(sum + k < (long)nums[j] * (j-i+1)){
                // remove the calculation for i from sum
                sum -= nums[i]; // sum = sum - nums[i]
                i++; // slide the window
            }
            ans = max(ans, j-i+1); // record the max window size
        }
        return ans;
    }
};


/*
// EXPLANATION:
- Sort the Input Array nums
- Here, the key is to find out the Valid Condition: k + sum >= sizeOfWindow * max 
- which is:  k + sum >= (j-i+1) * nums[j]
*/
