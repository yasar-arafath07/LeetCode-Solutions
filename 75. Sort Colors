class Solution{
public:
    void sortColors(vector<int>& nums){
        // Approach 2: DUTCH NATIONAL FLAG ALGORITHM (Striver's)
        // Using 3 Pointers : low, mid and high
        // TC : O(N)
        // SC : O(1)
        // CODE:
        int low = 0; // pointer 1
        int high = nums.size()-1; // pointer 2
        int mid = 0; // pointer 3

        while(mid <= high){
            if(nums[mid] == 0){
                swap(nums[low], nums[mid]);
                low++;
                mid++;
            }
            else if(nums[mid] == 1){
                mid++;
            }
            // i.e if(nums[mid] == 2)
            else{
                swap(nums[mid], nums[high]);
                high--;
            }
        }
    

        
        /*
        // Approach 1: DUTCH NATIONAL FLAG ALFGORITHM (DG's)
        // Using 2 Pointers : low and high
        // TC : O(N)
        // SC : O(1)
        // CODE:
        int low = 0; // pointer 1
        int high = nums.size()-1; // pointer2

        for(int i=0; i<=high; ){
            // Case 1: if(nums[i] == 0)
            if(nums[i] == 0){
                swap(nums[low], nums[i]); // swap the values at the Index low and Index i in the Array
                i++;
                low++;
            }
            // Case 2: if(nums[i] == 1)
            else if(nums[i] == 1){
                i++;
            }
            // Case 3: if(nums[i] == 2)
            else{
                swap(nums[i], nums[high]); // swap the value at index i and index high in the Array
                high--; // decrement 'high' only, after the swap the number at index 'i' could be 0, 1 or 2
            }
        }
        */
    }
};


/*
// BRUTE FORCE : (Worst Optimized)
- Sort the given Array using Normal Sorting 
- So, 0's will come at the beginning, 1's in between 0's and 2's and 2's will appear in the end
// TC : O(N*logN)
// SC : O(1)


// COUNTING SORT : (Optimized)
- So, here traverse through the Array and while Traversing Count the no. of 0's, 1's and 2's
- So, if the total count of 0's are 5 for eg, then run a loop for 5 times and insert 0 from index 0 till next 5
  Index
- Similarly, do for 1's and 2's
- So, Once we Insert all the Elements, the Array will be Sorted.
// TC : O(N) for 1st Pass + O(N) for 2nd Pass = O(2N)


// DUTCH NATIONAL FLAG ALGORITHM : (Most Optimized, done in Single Pass)
- Use 3 Pointers : low, mid and high
- All the no's from 0 to low-1 are 0's i.e all the elements towards the left side of low are 0
- All the no's from high+1 till n are 2's i.e all the elements towards the right side of high are 2
- So, we will be moving the mid pointer unless and until this mid pointer crosses the high pointer.
- So, while moving we will be having 3 checks 
  1) if(mid pointer == 0), we swap the value at index low with the value at index mid i.e swap(nums[low], nums[mid])
     and after this, we move the low pointer by 1 and the mid pointer by one.
  2) if(mid pointer == 1), we simply move the mid pointer by 1
  3) if(mid pointer == 2), we swap the element at mid pointer with the element at high pointer i.e 
     swap(nums[mid], nums[high]). After this we will move the high pointer backwards by one i.e high-- and we won't 
     move the mid pointer
// TC : O(N)
// SC : O(1)


*/
