class Solution{
public:
    int firstMissingPositive(vector<int>& nums){
        // Approach: Using SWAP
        // TC : O(N), in worst case it will be "O(N) + O(N)" which is asymptotically equivalent to O(N).
        // SC : O(1)
        // C++ CODE:
        int n = nums.size(); 
        
        // traverse the Array
        for(int i=0; i<nums.size(); i++){
            // Check the conditon for the element present at 'i'th position 
            while(nums[i] > 0 && nums[i] <= n && nums[i] != nums[nums[i] - 1]){
                // swap the elments i.e, bring the element to it's right place by swapping. 
                // for eg: If element 5 is found, then swap it with nums[4] which is the actual position of element 5
                swap(nums[i], nums[nums[i] - 1]);
            }
        }

        // Now, iterate through the Array and find the first position where the element is not equal to 'i+1' 
        for(int i=0; i<nums.size(); i++){
            if(nums[i] != i+1){
                return i+1;
            }
        }
        // If the control reaches here, then all the elements in the Array are at it's right position. So the 1st missing
        // positive element will be (n+1). So, return n+1
        return n+1;
    }
};



/*
// EXPLANATION:
- It is evident that the answer lies between [1,n+1]. So, bring all the elements to their respective positions in the 
  Array. i.e, for eg: If we find 5, then put 5 in the 5th position or at 4th index i.e, if the element is 5, then we 
  swap 5 with nums[4] which is the actual position of 5.
  Similarly, if the element is 3, then bring it to 3rd position or 2nd index in the Array.
- At last, traverse the Array and find the first place where it's number is not right. So return that place's index + 1.
- else if all the place in the Array are having the correct elements, then return (n+1) which will be the 1st missing 
  positive element.

// DRY RUN:
eg: nums = [3,1,-4,7]
- Now, Iterate through the Array and Neglect the element if it is greater than 'n' or lesser than or equal to 0.
- Otherwise, bring the element to the correct position by swapping using the condition: while(nums[i] != nums[nums[i]-1])
- So, at index 0, 3 != nums[3-1], hence swap 3 and -4. So nums = [-4,1,3,7]
- Now, the value at index 0 is negative, So neglect it and move to index 1.
- At index 1, 1 != nums[1-1], hence swap 1 and -4. So, Array = [1,-4,3,7].
- Now, at index 1, value is -4 which is negative. So increment i and move to index 2.
- At index 2, 3 != nums[3-1], here the condition becomes false since 3 is already at it's right position. So neglect and
  increment i.
- Now, at index 3, value is 7 which is greater than n, hence neglect.
- So, at last the Array becomes: nums = [1,-4,3,7].
- Now, iterate through this Array and find the first index for which nums[i] != i+1 OR the element which is not at it's
  correct position.
- So, we can see, for i=1, nums[i] = nums[1] = -4. So, we return i+1 i.e 1+1 i.e 2 as our Answer. 
*/
